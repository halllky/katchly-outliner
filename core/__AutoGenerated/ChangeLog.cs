namespace Katchly {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Katchly;

    partial class AutoGeneratedApplicationService {
        /// <summary>
        /// 新しいChangeLogを作成する情報を受け取って登録します。
        /// </summary>
        public virtual bool CreateChangeLog(ChangeLogCreateCommand command, out ChangeLogDisplayData created, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeCreateEventArgs<ChangeLogCreateCommand> {
                Data = command,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnChangeLogCreating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var dbEntity = command.ToDbEntity();
            DbContext.Add(dbEntity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new ChangeLogDisplayData();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }
        
            var afterUpdate = this.FindChangeLog(dbEntity.ID);
            if (afterUpdate == null) {
                created = new ChangeLogDisplayData();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }
        
            var afterSaveEventArg = new AfterCreateEventArgs<ChangeLogCreateCommand>  {
                Created = command,
            };
            OnChangeLogCreated(afterSaveEventArg);
        
            created = afterUpdate;
            errors = new List<string>();
        
            return true;
        }
        
        /// <summary>
        /// ChangeLogの新規登録前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnChangeLogCreating(IBeforeCreateEventArgs<ChangeLogCreateCommand> arg) { }
        /// <summary>
        /// ChangeLogの新規登録SQL発行後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnChangeLogCreated(IAfterCreateEventArgs<ChangeLogCreateCommand> arg) { }
        
        /// <summary>
        /// ChangeLogのキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public virtual ChangeLogDisplayData? FindChangeLog(string? ID) {
        
            var entity = DbContext.ChangeLogDbSet
                .AsNoTracking()
                .SingleOrDefault(x => x.ID == ID);
        
            if (entity == null) return null;
        
            var aggregateInstance = ChangeLogDisplayData.FromDbEntity(entity);
            return aggregateInstance;
        }
        /// <summary>
        /// 既存のChangeLogを更新します。
        /// </summary>
        public virtual bool UpdateChangeLog(ChangeLogSaveCommand after, out ChangeLogDisplayData updated, out ICollection<string> errors) {
            errors = new List<string>();
        
            var beforeDbEntity = DbContext.ChangeLogDbSet
                .AsNoTracking()
                .SingleOrDefault(x => x.ID == after.ID);
        
            if (beforeDbEntity == null) {
                updated = new ChangeLogDisplayData();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }
        
            var beforeUpdate = ChangeLogSaveCommand.FromDbEntity(beforeDbEntity);
        
            var beforeSaveEventArg = new BeforeUpdateEventArgs<ChangeLogSaveCommand> {
                Before = beforeUpdate,
                After = after,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnChangeLogUpdating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var afterDbEntity = after.ToDbEntity();
        
            // Attach
            DbContext.Entry(afterDbEntity).State = EntityState.Modified;
        
            
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new ChangeLogDisplayData();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }
        
            var afterUpdate = this.FindChangeLog(after.ID);
            if (afterUpdate == null) {
                updated = new ChangeLogDisplayData();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
        
            var afterSaveEventArg = new AfterUpdateEventArgs<ChangeLogSaveCommand> {
                BeforeUpdate = beforeUpdate,
                AfterUpdate = after,
            };
            OnChangeLogUpdated(afterSaveEventArg);
        
            updated = afterUpdate;
            return true;
        }
        
        /// <summary>
        /// ChangeLogの更新前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnChangeLogUpdating(IBeforeUpdateEventArgs<ChangeLogSaveCommand> arg) { }
        /// <summary>
        /// ChangeLogの更新SQL発行後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnChangeLogUpdated(IAfterUpdateEventArgs<ChangeLogSaveCommand> arg) { }
        
        /// <summary>
        /// 既存のChangeLogを削除します。
        /// </summary>
        public virtual bool DeleteChangeLog(ChangeLogSaveCommand data, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeDeleteEventArgs<ChangeLogSaveCommand> {
                Data = data,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnChangeLogDeleting(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var entity = DbContext.ChangeLogDbSet
                .SingleOrDefault(x => x.ID == data.ID);
        
            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }
        
            var deleted = ChangeLogSaveCommand.FromDbEntity(entity);
        
            DbContext.Remove(entity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }
        
            var afterSaveEventArg = new AfterDeleteEventArgs<ChangeLogSaveCommand> {
                Deleted = deleted,
            };
            OnChangeLogDeleted(afterSaveEventArg);
        
            errors = Array.Empty<string>();
            return true;
        }
        
        /// <summary>
        /// ChangeLogの削除前に実行されます。
        /// エラーチェック、ワーニングなどを行います。
        /// </summary>
        protected virtual void OnChangeLogDeleting(IBeforeDeleteEventArgs<ChangeLogSaveCommand> arg) { }
        
        /// <summary>
        /// ChangeLogの削除SQL発行後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnChangeLogDeleted(IAfterDeleteEventArgs<ChangeLogSaveCommand> arg) { }
        
        /// <summary>
        /// ChangeLogを検索して返します。
        /// </summary>
        public virtual IEnumerable<ChangeLogDisplayData> LoadChangeLog(ChangeLogSearchCondition? filter, int? skip, int? take) {
        
            var query = (IQueryable<ChangeLogDbEntity>)DbContext.ChangeLogDbSet
                .AsNoTracking()
                ;
        
            // 絞り込み
            if (!string.IsNullOrWhiteSpace(filter?.ID)) {
                query = query.Where(x => x.ID == filter.ID);
            }
            if (filter?.LogTime?.From != default) {
                query = query.Where(x => x.LogTime >= filter.LogTime.From);
            }
            if (filter?.LogTime?.To != default) {
                query = query.Where(x => x.LogTime <= filter.LogTime.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.UpdatedObject)) {
                var trimmed = filter.UpdatedObject.Trim();
                query = query.Where(x => x.UpdatedObject.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.UpdateType)) {
                var trimmed = filter.UpdateType.Trim();
                query = query.Where(x => x.UpdateType.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.RowIdOrRowTypeId)) {
                var trimmed = filter.RowIdOrRowTypeId.Trim();
                query = query.Where(x => x.RowIdOrRowTypeId.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.Content)) {
                var trimmed = filter.Content.Trim();
                query = query.Where(x => x.Content.Contains(trimmed));
            }
        
            // 順番
            query = query
                .OrderBy(x => x.ID)
                ;
        
            // ページング
            if (skip != null) query = query.Skip(skip.Value);
            if (take != null) query = query.Take(take.Value);
        
            return query
                .AsEnumerable()
                .Select(entity => ChangeLogDisplayData.FromDbEntity(entity));
        }
        /// <summary>
        /// ChangeLogをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<ChangeLogRefInfo> SearchByKeywordChangeLog(string? keyword) {
            var query = (IQueryable<ChangeLogDbEntity>)DbContext.ChangeLogDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.ID, like)
                                         || EF.Functions.Like(item.Content, like));
            }
        
            var results = query
                .OrderBy(m => m.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => ChangeLogRefInfo.FromDbEntity(entity));
        
            return results;
        }
    }


#region データ構造クラス
    /// <summary>
    /// ChangeLogのデータ作成コマンドです。
    /// </summary>
    public partial class ChangeLogCreateCommand {
        public string? ID { get; set; }
        public DateTime? LogTime { get; set; }
        public string? UpdatedObject { get; set; }
        public string? UpdateType { get; set; }
        public string? RowIdOrRowTypeId { get; set; }
        public string? Content { get; set; }
    
        /// <summary>
        /// ChangeLogのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.ChangeLogDbEntity ToDbEntity() {
            return new Katchly.ChangeLogDbEntity {
                ID = this.ID,
                LogTime = this.LogTime,
                UpdatedObject = this.UpdatedObject,
                UpdateType = this.UpdateType,
                RowIdOrRowTypeId = this.RowIdOrRowTypeId,
                Content = this.Content,
            };
        }
    }
    /// <summary>
    /// ChangeLogの登録・更新・削除用のデータ型
    /// </summary>
    public partial class ChangeLogSaveCommand {
        public string? ID { get; set; }
        public DateTime? LogTime { get; set; }
        public string? UpdatedObject { get; set; }
        public string? UpdateType { get; set; }
        public string? RowIdOrRowTypeId { get; set; }
        public string? Content { get; set; }
    
        /// <summary>
        /// ChangeLogのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.ChangeLogDbEntity ToDbEntity() {
            return new Katchly.ChangeLogDbEntity {
                ID = this.ID,
                LogTime = this.LogTime,
                UpdatedObject = this.UpdatedObject,
                UpdateType = this.UpdateType,
                RowIdOrRowTypeId = this.RowIdOrRowTypeId,
                Content = this.Content,
            };
        }
        /// <summary>
        /// ChangeLogのデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static ChangeLogSaveCommand FromDbEntity(Katchly.ChangeLogDbEntity entity) {
            var instance = new ChangeLogSaveCommand {
                ID = entity.ID,
                LogTime = entity.LogTime,
                UpdatedObject = entity.UpdatedObject,
                UpdateType = entity.UpdateType,
                RowIdOrRowTypeId = entity.RowIdOrRowTypeId,
                Content = entity.Content,
            };
            return instance;
        }
    }
    /// <summary>
    /// ChangeLogの一覧検索条件
    /// </summary>
    public class ChangeLogSearchCondition {
        public string? ID { get; set; }
        public FromTo<DateTime?> LogTime { get; set; } = new();
        public string? UpdatedObject { get; set; }
        public string? UpdateType { get; set; }
        public string? RowIdOrRowTypeId { get; set; }
        public string? Content { get; set; }
    }
    /// <summary>
    /// ほかの集約がChangeLogを参照するときに必要になる、どのChangeLogを指し示すかのキー情報。
    /// </summary>
    public class ChangeLogKeys {
        [Key]
        public string? ID { get; set; }
    }
    /// <summary>
    /// Entity Framework Core のルールに則ったChangeLogのデータ型
    /// </summary>
    public partial class ChangeLogDbEntity {
        public string? ID { get; set; }
        public DateTime? LogTime { get; set; }
        public string? UpdatedObject { get; set; }
        public string? UpdateType { get; set; }
        public string? RowIdOrRowTypeId { get; set; }
        public string? Content { get; set; }
    
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(ChangeLogDbEntity entity) {
            if (entity.ID != this.ID) return false;
            return true;
        }
    }
    /// <summary>
    /// ChangeLogの画面表示用データ
    /// </summary>
    public partial class ChangeLogDisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public ChangeLogDisplayDataOwnMembers own_members { get; set; } = new();
    
        public static ChangeLogDisplayData FromDbEntity(ChangeLogDbEntity dbEntity) {
            var displayData = new ChangeLogDisplayData {
                localRepositoryItemKey = new object?[] { dbEntity.ID }.ToJson(),
                existsInRemoteRepository = true,
                willBeChanged = false,
                willBeDeleted = false,
                own_members = new() {
                    ID = dbEntity?.ID,
                    LogTime = dbEntity?.LogTime,
                    UpdatedObject = dbEntity?.UpdatedObject,
                    UpdateType = dbEntity?.UpdateType,
                    RowIdOrRowTypeId = dbEntity?.RowIdOrRowTypeId,
                    Content = dbEntity?.Content,
                },
            };
            return displayData;
        }
    }
    /// <summary>
    /// ChangeLogの画面表示用データのうちChangeLog自身の属性
    /// </summary>
    public class ChangeLogDisplayDataOwnMembers {
        public string? ID { get; set; }
        public DateTime? LogTime { get; set; }
        public string? UpdatedObject { get; set; }
        public string? UpdateType { get; set; }
        public string? RowIdOrRowTypeId { get; set; }
        public string? Content { get; set; }
    }
    
    // ----------------------- ChangeLogRefInfo -----------------------
    /// <summary>
    /// 他のデータがChangeLogを参照している場合に、その参照元のデータの画面上に表示されるChangeLogのデータ型。
    /// </summary>
    public partial class ChangeLogRefInfo {
        /// <summary>
        /// ChangeLogのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のChangeLogをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public string? ID { get; set; }
        public string? Content { get; set; }
    
        public static ChangeLogRefInfo FromDbEntity(ChangeLogDbEntity dbEntity) {
            var instance = new ChangeLogRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.ID,
                }.ToJson(),
                ID = dbEntity.ID,
                Content = dbEntity.Content,
            };
            return instance;
        }
    }
#endregion データ構造クラス
}

namespace Katchly {
    using Katchly;
    using Microsoft.EntityFrameworkCore;

    partial class MyDbContext {
        public virtual DbSet<ChangeLogDbEntity> ChangeLogDbSet { get; set; }

        private void OnModelCreating_ChangeLog(ModelBuilder modelBuilder) {
            modelBuilder.Entity<Katchly.ChangeLogDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.ID,
                });
            
                entity.Property(e => e.ID)
                    .IsRequired(true);
                entity.Property(e => e.LogTime)
                    .IsRequired(false);
                entity.Property(e => e.UpdatedObject)
                    .IsRequired(false);
                entity.Property(e => e.UpdateType)
                    .IsRequired(false);
                entity.Property(e => e.RowIdOrRowTypeId)
                    .IsRequired(false);
                entity.Property(e => e.Content)
                    .IsRequired(false);
            
                
            });
        }
    }
}
