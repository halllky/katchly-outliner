namespace Katchly {
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;

    public static class DefaultConfiguration {

        /// <summary>
        /// DI設定
        /// </summary>
        public static void ConfigureServices(IServiceCollection services) {

            // アプリケーションサービス
            services.AddScoped<AutoGeneratedApplicationService, OverridedApplicationService>();

            // DB接続
            services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(provider => {
                return provider.GetRequiredService<Katchly.MyDbContext>();
            });
            services.AddDbContext<Katchly.MyDbContext>((provider, option) => {
                var setting = provider.GetRequiredService<RuntimeSettings.Server>();
                var connStr = setting.GetActiveConnectionString();
                Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(option);
                Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(option, connStr);
            });

            // 実行時設定ファイル
            services.AddScoped(_ => {
                var filename = "nijo-runtime-config.json";
                if (System.IO.File.Exists(filename)) {
                    using var stream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<RuntimeSettings.Server>(stream);
                    return parsed ?? RuntimeSettings.Server.GetDefault();
                } else {
                    var setting = RuntimeSettings.Server.GetDefault();
                    File.WriteAllText(filename, System.Text.Json.JsonSerializer.Serialize(setting, new System.Text.Json.JsonSerializerOptions {
                        WriteIndented = true,
                    }));
                    return setting;
                }
            });

            // ログ
            services.AddScoped<ILogger>(provider => {
                var setting = provider.GetRequiredService<RuntimeSettings.Server>();
                return new DefaultLogger(setting.LogDirectory);
            });

        }

    }
}
