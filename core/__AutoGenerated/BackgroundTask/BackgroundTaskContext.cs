namespace Katchly {
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;

    public sealed class BackgroundTaskContextFactory {
        public BackgroundTaskContextFactory(DateTime startTime, IServiceProvider serviceProvider, string directory) {
            _startTime = startTime;
            _serviceProvider = serviceProvider;
            _directory = directory;
        }
        private readonly DateTime _startTime;
        private readonly IServiceProvider _serviceProvider;
        private readonly string _directory;

        public BackgroundTaskContext CraeteScopedContext(string jobId) {
            var scope = _serviceProvider.CreateScope();
            var dirName = $"{_startTime:yyyyMMddHHmmss}_{jobId}";
            var workingDirectory = Path.Combine(_directory, dirName);
            return new BackgroundTaskContext(scope, _startTime, workingDirectory);
        }
        public BackgroundTaskContext<TParameter> CraeteScopedContext<TParameter>(string jobId, TParameter parameter) {
            var scope = _serviceProvider.CreateScope();
            var dirName = $"{_startTime:yyyyMMddHHmmss}_{jobId}";
            var workingDirectory = Path.Combine(_directory, dirName);
            return new BackgroundTaskContext<TParameter>(parameter, scope, _startTime, workingDirectory);
        }
    }

    public class BackgroundTaskContext : IDisposable {
        public BackgroundTaskContext(IServiceScope serviceScope, DateTime startTime, string workingDirectory) {
            StartTime = startTime;
            WorkingDirectory = workingDirectory;
            _serviceScope = serviceScope;
        }

        private readonly IServiceScope _serviceScope;

        public DateTime StartTime { get; }
        public string WorkingDirectory { get; }

        public IServiceProvider ServiceProvider => _serviceScope.ServiceProvider;
        public ILogger Logger => ServiceProvider.GetRequiredService<ILogger>();
        public AutoGeneratedApplicationService AppSrv => ServiceProvider.GetRequiredService<AutoGeneratedApplicationService>();
        public Katchly.MyDbContext DbContext => ServiceProvider.GetRequiredService<Katchly.MyDbContext>();

        void IDisposable.Dispose() {
            _serviceScope.Dispose();
        }
    }
    public class BackgroundTaskContext<TParameter> : BackgroundTaskContext {
        public BackgroundTaskContext(TParameter parameter, IServiceScope serviceScope, DateTime startTime, string workingDirectory)
            : base(serviceScope, startTime, workingDirectory) {
            Parameter = parameter;
        }
        public TParameter Parameter { get; }
    }
}
