namespace Katchly {
    using Microsoft.Extensions.DependencyInjection;
    using Katchly;

    public partial class AutoGeneratedApplicationService {
        public AutoGeneratedApplicationService(IServiceProvider serviceProvider) {
            ServiceProvider = serviceProvider;
        }

        public IServiceProvider ServiceProvider { get; }

        private MyDbContext? _dbContext;
        public virtual MyDbContext DbContext => _dbContext ??= ServiceProvider.GetRequiredService<MyDbContext>();

        private DateTime? _currentTime;
        public virtual DateTime CurrentTime => _currentTime ??= DateTime.Now;

        #region 非同期処理
        public bool TryScheduleJob(string batchType, object? parameter, out ICollection<string> errors) {
            BackgroundTask job;
            try {
                job = BackgroundTask.FindTaskByID(batchType);
            } catch (Exception ex) {
                errors = new[] { ex.Message };
                return false;
            }
            return TryScheduleJob(job, parameter, out errors);
        }
        public bool TryScheduleJob<TJob>(out ICollection<string> errors)
            where TJob : BackgroundTask, new() {
            var job = new TJob();
            return TryScheduleJob(job, null, out errors);
        }
        public bool TryScheduleJob<TJob, TParameter>(TParameter parameter, out ICollection<string> errors)
            where TJob : BackgroundTask<TParameter>, new()
            where TParameter : new() {
            var job = new TJob();
            return TryScheduleJob(job, parameter, out errors);
        }
        private bool TryScheduleJob(BackgroundTask job, object? parameter, out ICollection<string> errors) {
            errors = job.ValidateParameter(parameter).ToArray();
            if (errors.Any()) return false;
        
            var json = parameter == null
                ? string.Empty
                : Util.ToJson(parameter);
        
            var entity = new Katchly.BackgroundTaskEntity {
                JobId = Guid.NewGuid().ToString(),
                Name = job.GetJobName(parameter),
                BatchType = job.BatchTypeId,
                ParameterJson = json,
                RequestTime = CurrentTime,
                State = E_BackgroundTaskState.WaitToStart,
            };
            DbContext.Add(entity);
            DbContext.SaveChanges();
        
            return true;
        }
        #endregion 非同期処理
        #region 更新イベント引数
        private class BeforeSaveEventArg {
            public required bool IgnoreConfirm { get; init; }
            public List<string> Confirms { get; } = new();
            public List<(string Key, string Message)> Errors { get; } = new();
        
            public void AddConfirm(string message) => Confirms.Add(message);
            public void AddError(string key, string message) => Errors.Add((key, message));
        }
        private class BeforeCreateEventArgs<TSaveCommand> : BeforeSaveEventArg, IBeforeCreateEventArgs<TSaveCommand> {
            public required TSaveCommand Data { get; init; }
        }
        private class BeforeUpdateEventArgs<TSaveCommand> : BeforeSaveEventArg, IBeforeUpdateEventArgs<TSaveCommand> {
            public required TSaveCommand Before { get; init; }
            public required TSaveCommand After { get; init; }
        }
        private class BeforeDeleteEventArgs<TSaveCommand> : BeforeSaveEventArg, IBeforeDeleteEventArgs<TSaveCommand> {
            public required TSaveCommand Data { get; init; }
        }
        
        private class AfterCreateEventArgs<TSaveCommand> : IAfterCreateEventArgs<TSaveCommand> {
            public required TSaveCommand Created { get; init; }
        }
        private class AfterUpdateEventArgs<TSaveCommand> : IAfterUpdateEventArgs<TSaveCommand> {
            public required TSaveCommand BeforeUpdate { get; init; }
            public required TSaveCommand AfterUpdate { get; init; }
        }
        private class AfterDeleteEventArgs<TSaveCommand> : IAfterDeleteEventArgs<TSaveCommand> {
            public required TSaveCommand Deleted { get; init; }
        }
        #endregion 更新イベント引数
    }
}
