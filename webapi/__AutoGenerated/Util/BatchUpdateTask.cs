namespace FlexTree {
    using System.Text.Json;

    public class BatchUpdateParameter {
        public string? DataType { get; set; }
        public List<BatchUpdateData>? Items { get; set; } = new();
    }
    public class BatchUpdateData {
        public E_BatchUpdateAction? Action { get; set; }
        public object? Data { get; set; }
    }
    public enum E_BatchUpdateAction {
        Add,
        Modify,
        Delete,
    }

    public class BatchUpdateTask : BackgroundTask<BatchUpdateParameter> {
        public override string BatchTypeId => "NIJO-BATCH-UPDATE";

        public override string GetJobName(BatchUpdateParameter param) {
            return $"一括アップデート（{param.DataType}）";
        }

        public override IEnumerable<string> ValidateParameter(BatchUpdateParameter parameter) {
            if (parameter.DataType == "親集約") yield break;
            if (parameter.DataType == "参照先") yield break;
            yield return $"識別子 '{parameter.DataType}' と対応する一括更新処理はありません。";
        }

        public override void Execute(JobChainWithParameter<BatchUpdateParameter> job) {
            job.Section("更新処理実行", context => {
                switch (context.Parameter.DataType) {
                    case "親集約": BatchUpdate親集約(context); break;
                    case "参照先": BatchUpdate参照先(context); break;
                    default: throw new InvalidOperationException($"識別子 '{context.Parameter.DataType}' と対応する一括更新処理はありません。");
                }
            });
        }

        private void BatchUpdate親集約(BackgroundTaskContext<BatchUpdateParameter> context) {
            if (context.Parameter.Items == null || context.Parameter.Items.Count == 0) {
                context.Logger.LogWarning("パラメータが０件です。");
                return;
            }
            for (int i = 0; i < context.Parameter.Items.Count; i++) {
                using var logScope = context.Logger.BeginScope($"{i + 1}件目");
                try {
                    var item = context.Parameter.Items[i];
                    if (item.Action == null) throw new InvalidOperationException("登録・更新・削除のいずれかを指定してください。");
                    if (item.Data == null) throw new InvalidOperationException("データが空です。");
        
                    using var serviceScope = context.ServiceProvider.CreateScope();
                    var scopedAppSrv = serviceScope.ServiceProvider.GetRequiredService<AutoGeneratedApplicationService>();
        
                    ICollection<string> errors;
                    switch (item.Action) {
                        case E_BatchUpdateAction.Add:
                            var cmd = Util.EnsureObjectType<親集約CreateCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(親集約CreateCommand)}型に変換できません。");
                            if (!scopedAppSrv.Create親集約(cmd, out var _, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        case E_BatchUpdateAction.Modify:
                            var updateData = Util.EnsureObjectType<親集約SaveCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(親集約SaveCommand)}型に変換できません。");
                            if (!scopedAppSrv.Update親集約(updateData, out var _, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        case E_BatchUpdateAction.Delete:
                            var deleteData = Util.EnsureObjectType<親集約SaveCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(親集約SaveCommand)}型に変換できません。");
                            if (!scopedAppSrv.Delete親集約(deleteData, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        default:
                            throw new InvalidOperationException($"認識できない更新処理種別です: {item.Action}");
                    }
                } catch (Exception ex) {
                    context.Logger.LogError(ex, "更新処理に失敗しました。");
                    continue;
                }
                context.Logger.LogInformation("正常終了");
            }
        }

        private void BatchUpdate参照先(BackgroundTaskContext<BatchUpdateParameter> context) {
            if (context.Parameter.Items == null || context.Parameter.Items.Count == 0) {
                context.Logger.LogWarning("パラメータが０件です。");
                return;
            }
            for (int i = 0; i < context.Parameter.Items.Count; i++) {
                using var logScope = context.Logger.BeginScope($"{i + 1}件目");
                try {
                    var item = context.Parameter.Items[i];
                    if (item.Action == null) throw new InvalidOperationException("登録・更新・削除のいずれかを指定してください。");
                    if (item.Data == null) throw new InvalidOperationException("データが空です。");
        
                    using var serviceScope = context.ServiceProvider.CreateScope();
                    var scopedAppSrv = serviceScope.ServiceProvider.GetRequiredService<AutoGeneratedApplicationService>();
        
                    ICollection<string> errors;
                    switch (item.Action) {
                        case E_BatchUpdateAction.Add:
                            var cmd = Util.EnsureObjectType<参照先CreateCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(参照先CreateCommand)}型に変換できません。");
                            if (!scopedAppSrv.Create参照先(cmd, out var _, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        case E_BatchUpdateAction.Modify:
                            var updateData = Util.EnsureObjectType<参照先SaveCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(参照先SaveCommand)}型に変換できません。");
                            if (!scopedAppSrv.Update参照先(updateData, out var _, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        case E_BatchUpdateAction.Delete:
                            var deleteData = Util.EnsureObjectType<参照先SaveCommand>(item.Data)
                                ?? throw new InvalidOperationException($"パラメータを{nameof(参照先SaveCommand)}型に変換できません。");
                            if (!scopedAppSrv.Delete参照先(deleteData, out errors))
                                throw new InvalidOperationException(string.Join(Environment.NewLine, errors));
                            break;
                        default:
                            throw new InvalidOperationException($"認識できない更新処理種別です: {item.Action}");
                    }
                } catch (Exception ex) {
                    context.Logger.LogError(ex, "更新処理に失敗しました。");
                    continue;
                }
                context.Logger.LogInformation("正常終了");
            }
        }
    }
}
