namespace FlexTree {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using FlexTree;

    [ApiController]
    [Route("api/[controller]")]
    public partial class 参照先Controller : ControllerBase {
        public 参照先Controller(ILogger<参照先Controller> logger, AutoGeneratedApplicationService applicationService) {
            _logger = logger;
            _applicationService = applicationService;
        }
        protected readonly ILogger<参照先Controller> _logger;
        protected readonly AutoGeneratedApplicationService _applicationService;

        [HttpPost("create")]
        public virtual IActionResult Create([FromBody] 参照先CreateCommand param) {
            if (_applicationService.Create参照先(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpGet("detail/{参照先ID}")]
        public virtual IActionResult Find(string? 参照先ID) {
            if (参照先ID == null) return BadRequest();
            var instance = _applicationService.Find参照先(参照先ID);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        [HttpPost("update")]
        public virtual IActionResult Update(参照先SaveCommand param) {
            if (_applicationService.Update参照先(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpDelete("delete")]
        public virtual IActionResult Delete(参照先SaveCommand param) {
            if (_applicationService.Delete参照先(param, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpPost("load")]
        public virtual IActionResult Load([FromBody]参照先SearchCondition? filter, [FromQuery] int? skip, [FromQuery] int? take) {
            var instances = _applicationService.Load参照先(filter, skip, take);
            return this.JsonContent(instances.ToArray());
        }
        [HttpGet("list-by-keyword")]
        public virtual IActionResult SearchByKeywordx0980ef37494eb0089d5695ded11e38fa([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeyword参照先(keyword);
            return this.JsonContent(items);
        }
    }


    partial class AutoGeneratedApplicationService {
        public virtual bool Create参照先(参照先CreateCommand command, out 参照先DisplayData created, out ICollection<string> errors) {
            var dbEntity = command.ToDbEntity();
            DbContext.Add(dbEntity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new 参照先DisplayData();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }
        
            var afterUpdate = this.Find参照先(dbEntity.参照先ID);
            if (afterUpdate == null) {
                created = new 参照先DisplayData();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }
        
            created = afterUpdate;
            errors = new List<string>();
        
            // // 参照先の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<参照先SaveCommand> {
            //     Created = new[] { afterUpdate },
            // };
        
            return true;
        }
        /// <summary>
        /// 参照先のキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public virtual 参照先DisplayData? Find参照先(string? 参照先ID) {
        
            var entity = DbContext.参照先DbSet
                .AsNoTracking()
                .SingleOrDefault(x => x.参照先ID == 参照先ID);
        
            if (entity == null) return null;
        
            var aggregateInstance = 参照先DisplayData.FromDbEntity(entity);
            return aggregateInstance;
        }
        public virtual bool Update参照先(参照先SaveCommand after, out 参照先DisplayData updated, out ICollection<string> errors) {
            errors = new List<string>();
        
            var beforeDbEntity = DbContext.参照先DbSet
                .AsNoTracking()
                .SingleOrDefault(x => x.参照先ID == after.参照先ID);
        
            if (beforeDbEntity == null) {
                updated = new 参照先DisplayData();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }
        
            var beforeUpdate = 参照先SaveCommand.FromDbEntity(beforeDbEntity);
            var afterDbEntity = after.ToDbEntity();
        
            // Attach
            DbContext.Entry(afterDbEntity).State = EntityState.Modified;
        
            
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new 参照先DisplayData();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }
        
            var afterUpdate = this.Find参照先(after.参照先ID);
            if (afterUpdate == null) {
                updated = new 参照先DisplayData();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
        
            // // 参照先の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<参照先SaveCommand> {
            //     Modified = new AggregateBeforeAfter<参照先SaveCommand>[] { new() { Before = beforeUpdate, After = afterUpdate } },
            // };
        
            updated = afterUpdate;
            return true;
        }
        public virtual bool Delete参照先(参照先SaveCommand data, out ICollection<string> errors) {
        
            var entity = DbContext.参照先DbSet
                .SingleOrDefault(x => x.参照先ID == data.参照先ID);
        
            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }
        
            var deleted = 参照先SaveCommand.FromDbEntity(entity);
        
            DbContext.Remove(entity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }
        
            // // 参照先の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<参照先SaveCommand> {
            //     Deleted = new[] { deleted },
            // };
        
            errors = Array.Empty<string>();
            return true;
        }
        /// <summary>
        /// 参照先を検索して返します。
        /// </summary>
        public virtual IEnumerable<参照先DisplayData> Load参照先(参照先SearchCondition? filter, int? skip, int? take) {
        
            var query = (IQueryable<参照先DbEntity>)DbContext.参照先DbSet
                .AsNoTracking()
                ;
        
            // 絞り込み
            if (!string.IsNullOrWhiteSpace(filter?.参照先ID)) {
                query = query.Where(x => x.参照先ID == filter.参照先ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.Name)) {
                var trimmed = filter.Name.Trim();
                query = query.Where(x => x.Name.Contains(trimmed));
            }
        
            // 順番
            query = query
                .OrderBy(x => x.参照先ID)
                ;
        
            // ページング
            if (skip != null) query = query.Skip(skip.Value);
        
            const int DEFAULT_PAGE_SIZE = 20;
            var pageSize = take ?? DEFAULT_PAGE_SIZE;
            query = query.Take(pageSize);
        
            return query
                .AsEnumerable()
                .Select(entity => 参照先DisplayData.FromDbEntity(entity));
        }
        /// <summary>
        /// 参照先をキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<参照先RefInfo> SearchByKeyword参照先(string? keyword) {
            var query = (IQueryable<参照先DbEntity>)DbContext.参照先DbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.参照先ID, like)
                                         || EF.Functions.Like(item.Name, like));
            }
        
            var results = query
                .OrderBy(m => m.参照先ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => 参照先RefInfo.FromDbEntity(entity));
        
            return results;
        }
    }


#region データ構造クラス
    /// <summary>
    /// 参照先のデータ作成コマンドです。
    /// </summary>
    public partial class 参照先CreateCommand {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    
        /// <summary>
        /// 参照先のオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public FlexTree.参照先DbEntity ToDbEntity() {
            return new FlexTree.参照先DbEntity {
                参照先ID = this.参照先ID,
                Name = this.Name,
            };
        }
    }
    /// <summary>
    /// 参照先のデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class 参照先SaveCommand {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    
        /// <summary>
        /// 参照先のオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public FlexTree.参照先DbEntity ToDbEntity() {
            return new FlexTree.参照先DbEntity {
                参照先ID = this.参照先ID,
                Name = this.Name,
            };
        }
        /// <summary>
        /// 参照先のデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static 参照先SaveCommand FromDbEntity(FlexTree.参照先DbEntity entity) {
            var instance = new 参照先SaveCommand {
                参照先ID = entity.参照先ID,
                Name = entity.Name,
            };
            return instance;
        }
    }
    public class 参照先SearchCondition {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    }
    public class 参照先Keys {
        [Key]
        public string? 参照先ID { get; set; }
    }
    /// <summary>
    /// 参照先のデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class 参照先DbEntity {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    
        public virtual ICollection<親集約DbEntity> RefferedBy_親集約DbEntity_参照 { get; set; }
        public virtual ICollection<ChildrenDbEntity> RefferedBy_ChildrenDbEntity_参照 { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(参照先DbEntity entity) {
            if (entity.参照先ID != this.参照先ID) return false;
            return true;
        }
    }
    /// <summary>
    /// 参照先の画面表示用データ
    /// </summary>
    public partial class 参照先DisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public 参照先DisplayDataOwnMembers own_members { get; set; } = new();
    
        public static 参照先DisplayData FromDbEntity(参照先DbEntity dbEntity) {
            var displayData = new 参照先DisplayData {
                localRepositoryItemKey = new object?[] { dbEntity.参照先ID }.ToJson(),
                existsInRemoteRepository = true,
                willBeChanged = false,
                willBeDeleted = false,
                own_members = new() {
                    参照先ID = dbEntity?.参照先ID,
                    Name = dbEntity?.Name,
                },
            };
            return displayData;
        }
    }
    public class 参照先DisplayDataOwnMembers {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    }
    
    // ----------------------- 参照先RefInfo -----------------------
    /// <summary>
    /// 参照先を参照する他のデータの画面上に表示される参照先のデータ型。
    /// </summary>
    public partial class 参照先RefInfo {
        /// <summary>
        /// 参照先のキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間の参照先をUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    
        public static 参照先RefInfo FromDbEntity(参照先DbEntity dbEntity) {
            var instance = new 参照先RefInfo {
                __instanceKey = new object?[] {
                    dbEntity.参照先ID,
                }.ToJson(),
                参照先ID = dbEntity.参照先ID,
                Name = dbEntity.Name,
            };
            return instance;
        }
    }
#endregion データ構造クラス
}

namespace FlexTree {
    using FlexTree;
    using Microsoft.EntityFrameworkCore;

    partial class MyDbContext {
        public virtual DbSet<参照先DbEntity> 参照先DbSet { get; set; }

        private void OnModelCreating_参照先(ModelBuilder modelBuilder) {
            modelBuilder.Entity<FlexTree.参照先DbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.参照先ID,
                });
            
                entity.Property(e => e.参照先ID)
                    .IsRequired(true);
                entity.Property(e => e.Name)
                    .IsRequired(false);
            
                entity.HasMany(e => e.RefferedBy_親集約DbEntity_参照)
                    .WithOne(e => e.参照)
                    .HasForeignKey(e => new {
                        e.参照_参照先ID,
                    })
                    .OnDelete(DeleteBehavior.NoAction);
                entity.HasMany(e => e.RefferedBy_ChildrenDbEntity_参照)
                    .WithOne(e => e.参照)
                    .HasForeignKey(e => new {
                        e.参照_参照先ID,
                    })
                    .OnDelete(DeleteBehavior.NoAction);
            });
        }
    }
}
