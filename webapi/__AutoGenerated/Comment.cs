namespace Katchly {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Katchly;

    [ApiController]
    [Route("api/[controller]")]
    public partial class CommentController : ControllerBase {
        public CommentController(ILogger<CommentController> logger, AutoGeneratedApplicationService applicationService) {
            _logger = logger;
            _applicationService = applicationService;
        }
        protected readonly ILogger<CommentController> _logger;
        protected readonly AutoGeneratedApplicationService _applicationService;

        [HttpPost("create")]
        public virtual IActionResult Create([FromBody] CommentCreateCommand param) {
            if (_applicationService.CreateComment(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpGet("detail/{ID}")]
        public virtual IActionResult Find(string? ID) {
            if (ID == null) return BadRequest();
            var instance = _applicationService.FindComment(ID);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        [HttpPost("update")]
        public virtual IActionResult Update(CommentSaveCommand param) {
            if (_applicationService.UpdateComment(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpDelete("delete")]
        public virtual IActionResult Delete(CommentSaveCommand param) {
            if (_applicationService.DeleteComment(param, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpPost("load")]
        public virtual IActionResult Load([FromBody]CommentSearchCondition? filter, [FromQuery] int? skip, [FromQuery] int? take) {
            var instances = _applicationService.LoadComment(filter, skip, take);
            return this.JsonContent(instances.ToArray());
        }
        [HttpGet("list-by-keyword")]
        public virtual IActionResult SearchByKeywordxcc9c15b1503ef15d999d64ce6d5fe189([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordComment(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-x0317596766f8a7909d19342a344697c1")]
        public virtual IActionResult SearchByKeywordx0317596766f8a7909d19342a344697c1([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordCommentTargetRow(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-x79f0174a9ab298d2244bc58cc96d624e")]
        public virtual IActionResult SearchByKeywordx79f0174a9ab298d2244bc58cc96d624e([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordCommentTargetCell(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-x150a10f7804962ded6de2c5f43488a3e")]
        public virtual IActionResult SearchByKeywordx150a10f7804962ded6de2c5f43488a3e([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordCommentTargetRowType(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-xd90e13e83b393023c5380cbf9deb685f")]
        public virtual IActionResult SearchByKeywordxd90e13e83b393023c5380cbf9deb685f([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordCommentTargetColumn(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-x2df2a9996bdcd6812620bdd21d56cfef")]
        public virtual IActionResult SearchByKeywordx2df2a9996bdcd6812620bdd21d56cfef([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordCommentTargetComment(keyword);
            return this.JsonContent(items);
        }
    }


    partial class AutoGeneratedApplicationService {
        public virtual bool CreateComment(CommentCreateCommand command, out CommentDisplayData created, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeCreateEventArgs<CommentCreateCommand> {
                Data = command,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentCreating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var dbEntity = command.ToDbEntity();
            DbContext.Add(dbEntity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new CommentDisplayData();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }
        
            var afterUpdate = this.FindComment(dbEntity.ID);
            if (afterUpdate == null) {
                created = new CommentDisplayData();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }
        
            var afterSaveEventArg = new AfterCreateEventArgs<CommentCreateCommand>  {
                Created = command,
            };
            OnCommentCreated(afterSaveEventArg);
        
            created = afterUpdate;
            errors = new List<string>();
        
            return true;
        }
        
        /// <summary>
        /// Commentの新規登録前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnCommentCreating(IBeforeCreateEventArgs<CommentCreateCommand> arg) { }
        /// <summary>
        /// Commentの新規登録SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentCreated(IAfterCreateEventArgs<CommentCreateCommand> arg) { }
        
        /// <summary>
        /// Commentのキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public virtual CommentDisplayData? FindComment(string? ID) {
        
            var entity = DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.CommentTargetRow)
                .Include(x => x.CommentTargetCell)
                .Include(x => x.CommentTargetRowType)
                .Include(x => x.CommentTargetColumn)
                .Include(x => x.CommentTargetComment)
                .Include(x => x.CommentTargetRow)
                .ThenInclude(x => x.Row)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.CommentTargetRowType)
                .ThenInclude(x => x.RowType)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .SingleOrDefault(x => x.ID == ID);
        
            if (entity == null) return null;
        
            var aggregateInstance = CommentDisplayData.FromDbEntity(entity);
            return aggregateInstance;
        }
        public virtual bool UpdateComment(CommentSaveCommand after, out CommentDisplayData updated, out ICollection<string> errors) {
            errors = new List<string>();
        
            var beforeDbEntity = DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.CommentTargetRow)
                .Include(x => x.CommentTargetCell)
                .Include(x => x.CommentTargetRowType)
                .Include(x => x.CommentTargetColumn)
                .Include(x => x.CommentTargetComment)
                .Include(x => x.CommentTargetRow)
                .ThenInclude(x => x.Row)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.CommentTargetRowType)
                .ThenInclude(x => x.RowType)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .SingleOrDefault(x => x.ID == after.ID);
        
            if (beforeDbEntity == null) {
                updated = new CommentDisplayData();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }
        
            var beforeUpdate = CommentSaveCommand.FromDbEntity(beforeDbEntity);
        
            var beforeSaveEventArg = new BeforeUpdateEventArgs<CommentSaveCommand> {
                Before = beforeUpdate,
                After = after,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentUpdating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var afterDbEntity = after.ToDbEntity();
        
            // Attach
            DbContext.Entry(afterDbEntity).State = EntityState.Modified;
        
            var arr0_before = new CommentTargetRowDbEntity?[] {
                beforeDbEntity.CommentTargetRow,
            }.OfType<CommentTargetRowDbEntity>().ToArray();
            var arr0_after = new CommentTargetRowDbEntity?[] {
                afterDbEntity.CommentTargetRow,
            }.OfType<CommentTargetRowDbEntity>().ToArray();
            foreach (var a in arr0_after) {
                var b = arr0_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr0_before) {
                var a = arr0_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            var arr1_before = new CommentTargetCellDbEntity?[] {
                beforeDbEntity.CommentTargetCell,
            }.OfType<CommentTargetCellDbEntity>().ToArray();
            var arr1_after = new CommentTargetCellDbEntity?[] {
                afterDbEntity.CommentTargetCell,
            }.OfType<CommentTargetCellDbEntity>().ToArray();
            foreach (var a in arr1_after) {
                var b = arr1_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr1_before) {
                var a = arr1_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            var arr2_before = new CommentTargetRowTypeDbEntity?[] {
                beforeDbEntity.CommentTargetRowType,
            }.OfType<CommentTargetRowTypeDbEntity>().ToArray();
            var arr2_after = new CommentTargetRowTypeDbEntity?[] {
                afterDbEntity.CommentTargetRowType,
            }.OfType<CommentTargetRowTypeDbEntity>().ToArray();
            foreach (var a in arr2_after) {
                var b = arr2_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr2_before) {
                var a = arr2_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            var arr3_before = new CommentTargetColumnDbEntity?[] {
                beforeDbEntity.CommentTargetColumn,
            }.OfType<CommentTargetColumnDbEntity>().ToArray();
            var arr3_after = new CommentTargetColumnDbEntity?[] {
                afterDbEntity.CommentTargetColumn,
            }.OfType<CommentTargetColumnDbEntity>().ToArray();
            foreach (var a in arr3_after) {
                var b = arr3_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr3_before) {
                var a = arr3_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            var arr4_before = new CommentTargetCommentDbEntity?[] {
                beforeDbEntity.CommentTargetComment,
            }.OfType<CommentTargetCommentDbEntity>().ToArray();
            var arr4_after = new CommentTargetCommentDbEntity?[] {
                afterDbEntity.CommentTargetComment,
            }.OfType<CommentTargetCommentDbEntity>().ToArray();
            foreach (var a in arr4_after) {
                var b = arr4_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr4_before) {
                var a = arr4_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new CommentDisplayData();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }
        
            var afterUpdate = this.FindComment(after.ID);
            if (afterUpdate == null) {
                updated = new CommentDisplayData();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
        
            var afterSaveEventArg = new AfterUpdateEventArgs<CommentSaveCommand> {
                BeforeUpdate = beforeUpdate,
                AfterUpdate = after,
            };
            OnCommentUpdated(afterSaveEventArg);
        
            updated = afterUpdate;
            return true;
        }
        
        /// <summary>
        /// Commentの更新前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnCommentUpdating(IBeforeUpdateEventArgs<CommentSaveCommand> arg) { }
        /// <summary>
        /// Commentの更新SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentUpdated(IAfterUpdateEventArgs<CommentSaveCommand> arg) { }
        
        public virtual bool DeleteComment(CommentSaveCommand data, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeDeleteEventArgs<CommentSaveCommand> {
                Data = data,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentDeleting(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var entity = DbContext.CommentDbSet
                .Include(x => x.CommentTargetRow)
                .Include(x => x.CommentTargetCell)
                .Include(x => x.CommentTargetRowType)
                .Include(x => x.CommentTargetColumn)
                .Include(x => x.CommentTargetComment)
                .Include(x => x.CommentTargetRow)
                .ThenInclude(x => x.Row)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.CommentTargetRowType)
                .ThenInclude(x => x.RowType)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .SingleOrDefault(x => x.ID == data.ID);
        
            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }
        
            var deleted = CommentSaveCommand.FromDbEntity(entity);
        
            DbContext.Remove(entity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }
        
            var afterSaveEventArg = new AfterDeleteEventArgs<CommentSaveCommand> {
                Deleted = deleted,
            };
            OnCommentDeleted(afterSaveEventArg);
        
            errors = Array.Empty<string>();
            return true;
        }
        
        /// <summary>
        /// Commentの削除前に実行されます。
        /// エラーチェック、ワーニングなどを行います。
        /// </summary>
        protected virtual void OnCommentDeleting(IBeforeDeleteEventArgs<CommentSaveCommand> arg) { }
        
        /// <summary>
        /// Commentの削除SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentDeleted(IAfterDeleteEventArgs<CommentSaveCommand> arg) { }
        
        /// <summary>
        /// Commentを検索して返します。
        /// </summary>
        public virtual IEnumerable<CommentDisplayData> LoadComment(CommentSearchCondition? filter, int? skip, int? take) {
        
            var query = (IQueryable<CommentDbEntity>)DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.CommentTargetRow)
                .Include(x => x.CommentTargetCell)
                .Include(x => x.CommentTargetRowType)
                .Include(x => x.CommentTargetColumn)
                .Include(x => x.CommentTargetComment)
                .Include(x => x.CommentTargetRow)
                .ThenInclude(x => x.Row)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetCell)
                .ThenInclude(x => x.Cell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.CommentTargetRowType)
                .ThenInclude(x => x.RowType)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                .ThenInclude(x => x.Parent)
                .Include(x => x.CommentTargetColumn)
                .ThenInclude(x => x.Column)
                ;
        
            // 絞り込み
            if (!string.IsNullOrWhiteSpace(filter?.ID)) {
                query = query.Where(x => x.ID == filter.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.Text)) {
                var trimmed = filter.Text.Trim();
                query = query.Where(x => x.Text.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.Author)) {
                var trimmed = filter.Author.Trim();
                query = query.Where(x => x.Author.Contains(trimmed));
            }
            if (filter?.CreatedOn?.From != default) {
                query = query.Where(x => x.CreatedOn >= filter.CreatedOn.From);
            }
            if (filter?.CreatedOn?.To != default) {
                query = query.Where(x => x.CreatedOn <= filter.CreatedOn.To);
            }
            if (filter?.UpdatedOn?.From != default) {
                query = query.Where(x => x.UpdatedOn >= filter.UpdatedOn.From);
            }
            if (filter?.UpdatedOn?.To != default) {
                query = query.Where(x => x.UpdatedOn <= filter.UpdatedOn.To);
            }
            var checkedTarget = new[] {
                filter?.Target_CommentTargetRow,
                filter?.Target_CommentTargetCell,
                filter?.Target_CommentTargetRowType,
                filter?.Target_CommentTargetColumn,
                filter?.Target_CommentTargetComment,
            };
            if (!checkedTarget.All(check => check == true)
             && !checkedTarget.All(check => check == false || check == null)) {
            
                var keyList = new List<E_Target>();
                if (filter?.Target_CommentTargetRow == true) keyList.Add(E_Target.CommentTargetRow);
                if (filter?.Target_CommentTargetCell == true) keyList.Add(E_Target.CommentTargetCell);
                if (filter?.Target_CommentTargetRowType == true) keyList.Add(E_Target.CommentTargetRowType);
                if (filter?.Target_CommentTargetColumn == true) keyList.Add(E_Target.CommentTargetColumn);
                if (filter?.Target_CommentTargetComment == true) keyList.Add(E_Target.CommentTargetComment);
            
                query = query.Where(x => x.Target != null && keyList.Contains(x.Target.Value));
            }
        
            // 順番
            query = query
                .OrderBy(x => x.ID)
                ;
        
            // ページング
            if (skip != null) query = query.Skip(skip.Value);
            if (take != null) query = query.Take(take.Value);
        
            return query
                .AsEnumerable()
                .Select(entity => CommentDisplayData.FromDbEntity(entity));
        }
        /// <summary>
        /// Commentをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentRefInfo> SearchByKeywordComment(string? keyword) {
            var query = (IQueryable<CommentDbEntity>)DbContext.CommentDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.ID, like)
                                         || EF.Functions.Like(item.Text, like));
            }
        
            var results = query
                .OrderBy(m => m.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentRefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// CommentTargetRowをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentTargetRowRefInfo> SearchByKeywordCommentTargetRow(string? keyword) {
            var query = (IQueryable<CommentTargetRowDbEntity>)DbContext.CommentTargetRowDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentTargetRowRefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// CommentTargetCellをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentTargetCellRefInfo> SearchByKeywordCommentTargetCell(string? keyword) {
            var query = (IQueryable<CommentTargetCellDbEntity>)DbContext.CommentTargetCellDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentTargetCellRefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// CommentTargetRowTypeをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentTargetRowTypeRefInfo> SearchByKeywordCommentTargetRowType(string? keyword) {
            var query = (IQueryable<CommentTargetRowTypeDbEntity>)DbContext.CommentTargetRowTypeDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentTargetRowTypeRefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// CommentTargetColumnをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentTargetColumnRefInfo> SearchByKeywordCommentTargetColumn(string? keyword) {
            var query = (IQueryable<CommentTargetColumnDbEntity>)DbContext.CommentTargetColumnDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentTargetColumnRefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// CommentTargetCommentをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentTargetCommentRefInfo> SearchByKeywordCommentTargetComment(string? keyword) {
            var query = (IQueryable<CommentTargetCommentDbEntity>)DbContext.CommentTargetCommentDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like)
                                         || EF.Functions.Like(item.CommentId, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentTargetCommentRefInfo.FromDbEntity(entity));
        
            return results;
        }
    }


#region データ構造クラス
    /// <summary>
    /// Commentのデータ作成コマンドです。
    /// </summary>
    public partial class CommentCreateCommand {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public E_Target? Target { get; set; }
        public CommentTargetRowSaveCommand? CommentTargetRow { get; set; }
        public CommentTargetCellSaveCommand? CommentTargetCell { get; set; }
        public CommentTargetRowTypeSaveCommand? CommentTargetRowType { get; set; }
        public CommentTargetColumnSaveCommand? CommentTargetColumn { get; set; }
        public CommentTargetCommentSaveCommand? CommentTargetComment { get; set; }
    
        /// <summary>
        /// Commentのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.CommentDbEntity ToDbEntity() {
            return new Katchly.CommentDbEntity {
                ID = this.ID,
                Text = this.Text,
                Author = this.Author,
                CreatedOn = this.CreatedOn,
                UpdatedOn = this.UpdatedOn,
                Target = this.Target,
                CommentTargetRow = new Katchly.CommentTargetRowDbEntity {
                    Row_ID = this.CommentTargetRow?.Row?.ID,
                    CommentTargetRow_ID = this.ID,
                },
                CommentTargetCell = new Katchly.CommentTargetCellDbEntity {
                    Cell_Attrs_ID = this.CommentTargetCell?.Cell?.Parent?.ID,
                    Cell_ColType_Columns_ID = this.CommentTargetCell?.Cell?.ColType?.Parent?.ID,
                    Cell_ColType_ColumnId = this.CommentTargetCell?.Cell?.ColType?.ColumnId,
                    CommentTargetCell_ID = this.ID,
                },
                CommentTargetRowType = new Katchly.CommentTargetRowTypeDbEntity {
                    RowType_ID = this.CommentTargetRowType?.RowType?.ID,
                    CommentTargetRowType_ID = this.ID,
                },
                CommentTargetColumn = new Katchly.CommentTargetColumnDbEntity {
                    Column_Columns_ID = this.CommentTargetColumn?.Column?.Parent?.ID,
                    Column_ColumnId = this.CommentTargetColumn?.Column?.ColumnId,
                    CommentTargetColumn_ID = this.ID,
                },
                CommentTargetComment = new Katchly.CommentTargetCommentDbEntity {
                    CommentTargetComment_ID = this.ID,
                    CommentId = this.CommentTargetComment?.CommentId,
                },
            };
        }
    }
    /// <summary>
    /// Commentのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentSaveCommand {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public E_Target? Target { get; set; }
        public CommentTargetRowSaveCommand? CommentTargetRow { get; set; }
        public CommentTargetCellSaveCommand? CommentTargetCell { get; set; }
        public CommentTargetRowTypeSaveCommand? CommentTargetRowType { get; set; }
        public CommentTargetColumnSaveCommand? CommentTargetColumn { get; set; }
        public CommentTargetCommentSaveCommand? CommentTargetComment { get; set; }
    
        /// <summary>
        /// Commentのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.CommentDbEntity ToDbEntity() {
            return new Katchly.CommentDbEntity {
                ID = this.ID,
                Text = this.Text,
                Author = this.Author,
                CreatedOn = this.CreatedOn,
                UpdatedOn = this.UpdatedOn,
                Target = this.Target,
                CommentTargetRow = new Katchly.CommentTargetRowDbEntity {
                    Row_ID = this.CommentTargetRow?.Row?.ID,
                    CommentTargetRow_ID = this.ID,
                },
                CommentTargetCell = new Katchly.CommentTargetCellDbEntity {
                    Cell_Attrs_ID = this.CommentTargetCell?.Cell?.Parent?.ID,
                    Cell_ColType_Columns_ID = this.CommentTargetCell?.Cell?.ColType?.Parent?.ID,
                    Cell_ColType_ColumnId = this.CommentTargetCell?.Cell?.ColType?.ColumnId,
                    CommentTargetCell_ID = this.ID,
                },
                CommentTargetRowType = new Katchly.CommentTargetRowTypeDbEntity {
                    RowType_ID = this.CommentTargetRowType?.RowType?.ID,
                    CommentTargetRowType_ID = this.ID,
                },
                CommentTargetColumn = new Katchly.CommentTargetColumnDbEntity {
                    Column_Columns_ID = this.CommentTargetColumn?.Column?.Parent?.ID,
                    Column_ColumnId = this.CommentTargetColumn?.Column?.ColumnId,
                    CommentTargetColumn_ID = this.ID,
                },
                CommentTargetComment = new Katchly.CommentTargetCommentDbEntity {
                    CommentTargetComment_ID = this.ID,
                    CommentId = this.CommentTargetComment?.CommentId,
                },
            };
        }
        /// <summary>
        /// Commentのデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static CommentSaveCommand FromDbEntity(Katchly.CommentDbEntity entity) {
            var instance = new CommentSaveCommand {
                ID = entity.ID,
                Text = entity.Text,
                Author = entity.Author,
                CreatedOn = entity.CreatedOn,
                UpdatedOn = entity.UpdatedOn,
                Target = entity.Target,
                CommentTargetRow = new CommentTargetRowSaveCommand() {
                    Row = new RowKeys() {
                        ID = entity.CommentTargetRow?.Row?.ID,
                    },
                },
                CommentTargetCell = new CommentTargetCellSaveCommand() {
                    Cell = new AttrsKeys() {
                        Parent = new RowKeys() {
                            ID = entity.CommentTargetCell?.Cell?.Parent?.ID,
                        },
                        ColType = new ColumnsKeys() {
                            Parent = new RowTypeKeys() {
                                ID = entity.CommentTargetCell?.Cell?.ColType?.Parent?.ID,
                            },
                            ColumnId = entity.CommentTargetCell?.Cell?.ColType?.ColumnId,
                        },
                    },
                },
                CommentTargetRowType = new CommentTargetRowTypeSaveCommand() {
                    RowType = new RowTypeKeys() {
                        ID = entity.CommentTargetRowType?.RowType?.ID,
                    },
                },
                CommentTargetColumn = new CommentTargetColumnSaveCommand() {
                    Column = new ColumnsKeys() {
                        Parent = new RowTypeKeys() {
                            ID = entity.CommentTargetColumn?.Column?.Parent?.ID,
                        },
                        ColumnId = entity.CommentTargetColumn?.Column?.ColumnId,
                    },
                },
                CommentTargetComment = new CommentTargetCommentSaveCommand() {
                    CommentId = entity.CommentTargetComment?.CommentId,
                },
            };
            return instance;
        }
    }
    /// <summary>
    /// CommentTargetRowのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentTargetRowSaveCommand {
        public RowKeys? Row { get; set; }
    
    }
    /// <summary>
    /// CommentTargetCellのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentTargetCellSaveCommand {
        public AttrsKeys? Cell { get; set; }
    
    }
    /// <summary>
    /// CommentTargetRowTypeのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentTargetRowTypeSaveCommand {
        public RowTypeKeys? RowType { get; set; }
    
    }
    /// <summary>
    /// CommentTargetColumnのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentTargetColumnSaveCommand {
        public ColumnsKeys? Column { get; set; }
    
    }
    /// <summary>
    /// CommentTargetCommentのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentTargetCommentSaveCommand {
        public string? CommentId { get; set; }
    
    }
    public class CommentSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public bool? Target_CommentTargetRow { get; set; }
        public bool? Target_CommentTargetCell { get; set; }
        public bool? Target_CommentTargetRowType { get; set; }
        public bool? Target_CommentTargetColumn { get; set; }
        public bool? Target_CommentTargetComment { get; set; }
        public CommentTargetRowSearchCondition CommentTargetRow { get; set; } = new();
        public CommentTargetCellSearchCondition CommentTargetCell { get; set; } = new();
        public CommentTargetRowTypeSearchCondition CommentTargetRowType { get; set; } = new();
        public CommentTargetColumnSearchCondition CommentTargetColumn { get; set; } = new();
        public CommentTargetCommentSearchCondition CommentTargetComment { get; set; } = new();
    }
    public class CommentTargetRowSearchCondition {
        public CommentTargetRow_RowSearchCondition Row { get; set; } = new();
    }
    public class CommentTargetCellSearchCondition {
        public CommentTargetCell_CellSearchCondition Cell { get; set; } = new();
    }
    public class CommentTargetRowTypeSearchCondition {
        public CommentTargetRowType_RowTypeSearchCondition RowType { get; set; } = new();
    }
    public class CommentTargetColumnSearchCondition {
        public CommentTargetColumn_ColumnSearchCondition Column { get; set; } = new();
    }
    public class CommentTargetCommentSearchCondition {
        public string? CommentId { get; set; }
    }
    public class CommentTargetRow_RowSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetRow_Row_RowTypeSearchCondition RowType { get; set; } = new();
        public FromTo<int?> Indent { get; set; } = new();
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetRow_Row_RowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetCell_CellSearchCondition {
        public CommentTargetCell_Cell_ParentSearchCondition Parent { get; set; } = new();
        public CommentTargetCell_Cell_ColTypeSearchCondition ColType { get; set; } = new();
        public string? Value { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
    }
    public class CommentTargetCell_Cell_ParentSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetCell_Cell_Parent_RowTypeSearchCondition RowType { get; set; } = new();
        public FromTo<int?> Indent { get; set; } = new();
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetCell_Cell_Parent_RowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetCell_Cell_ColTypeSearchCondition {
        public CommentTargetCell_Cell_ColType_ParentSearchCondition Parent { get; set; } = new();
        public string? ColumnId { get; set; }
        public string? ColumnName { get; set; }
    }
    public class CommentTargetCell_Cell_ColType_ParentSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetRowType_RowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentTargetColumn_ColumnSearchCondition {
        public CommentTargetColumn_Column_ParentSearchCondition Parent { get; set; } = new();
        public string? ColumnId { get; set; }
        public string? ColumnName { get; set; }
    }
    public class CommentTargetColumn_Column_ParentSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentKeys {
        [Key]
        public string? ID { get; set; }
    }
    public class CommentTargetRowKeys {
        [Key]
        public CommentKeys? Parent { get; set; }
    }
    public class CommentTargetCellKeys {
        [Key]
        public CommentKeys? Parent { get; set; }
    }
    public class CommentTargetRowTypeKeys {
        [Key]
        public CommentKeys? Parent { get; set; }
    }
    public class CommentTargetColumnKeys {
        [Key]
        public CommentKeys? Parent { get; set; }
    }
    public class CommentTargetCommentKeys {
        [Key]
        public CommentKeys? Parent { get; set; }
        [Key]
        public string? CommentId { get; set; }
    }
    /// <summary>
    /// Commentのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentDbEntity {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public E_Target? Target { get; set; }
    
        public virtual CommentTargetRowDbEntity? CommentTargetRow { get; set; }
        public virtual CommentTargetCellDbEntity? CommentTargetCell { get; set; }
        public virtual CommentTargetRowTypeDbEntity? CommentTargetRowType { get; set; }
        public virtual CommentTargetColumnDbEntity? CommentTargetColumn { get; set; }
        public virtual CommentTargetCommentDbEntity? CommentTargetComment { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentDbEntity entity) {
            if (entity.ID != this.ID) return false;
            return true;
        }
    }
    /// <summary>
    /// CommentTargetRowのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentTargetRowDbEntity {
        public string? Row_ID { get; set; }
        public string? CommentTargetRow_ID { get; set; }
    
        public virtual CommentDbEntity? Parent { get; set; }
        public virtual RowDbEntity? Row { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentTargetRowDbEntity entity) {
            if (entity.CommentTargetRow_ID != this.CommentTargetRow_ID) return false;
            return true;
        }
    }
    /// <summary>
    /// CommentTargetCellのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentTargetCellDbEntity {
        public string? Cell_Attrs_ID { get; set; }
        public string? Cell_ColType_Columns_ID { get; set; }
        public string? Cell_ColType_ColumnId { get; set; }
        public string? CommentTargetCell_ID { get; set; }
    
        public virtual CommentDbEntity? Parent { get; set; }
        public virtual AttrsDbEntity? Cell { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentTargetCellDbEntity entity) {
            if (entity.CommentTargetCell_ID != this.CommentTargetCell_ID) return false;
            return true;
        }
    }
    /// <summary>
    /// CommentTargetRowTypeのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentTargetRowTypeDbEntity {
        public string? RowType_ID { get; set; }
        public string? CommentTargetRowType_ID { get; set; }
    
        public virtual CommentDbEntity? Parent { get; set; }
        public virtual RowTypeDbEntity? RowType { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentTargetRowTypeDbEntity entity) {
            if (entity.CommentTargetRowType_ID != this.CommentTargetRowType_ID) return false;
            return true;
        }
    }
    /// <summary>
    /// CommentTargetColumnのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentTargetColumnDbEntity {
        public string? Column_Columns_ID { get; set; }
        public string? Column_ColumnId { get; set; }
        public string? CommentTargetColumn_ID { get; set; }
    
        public virtual CommentDbEntity? Parent { get; set; }
        public virtual ColumnsDbEntity? Column { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentTargetColumnDbEntity entity) {
            if (entity.CommentTargetColumn_ID != this.CommentTargetColumn_ID) return false;
            return true;
        }
    }
    /// <summary>
    /// CommentTargetCommentのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentTargetCommentDbEntity {
        public string? CommentTargetComment_ID { get; set; }
        public string? CommentId { get; set; }
    
        public virtual CommentDbEntity? Parent { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentTargetCommentDbEntity entity) {
            if (entity.CommentTargetComment_ID != this.CommentTargetComment_ID) return false;
            if (entity.CommentId != this.CommentId) return false;
            return true;
        }
    }
    /// <summary>
    /// Commentの画面表示用データ
    /// </summary>
    public partial class CommentDisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public CommentDisplayDataOwnMembers own_members { get; set; } = new();
        public CommentTargetRowDisplayData? child_CommentTargetRow { get; set; }
        public CommentTargetCellDisplayData? child_CommentTargetCell { get; set; }
        public CommentTargetRowTypeDisplayData? child_CommentTargetRowType { get; set; }
        public CommentTargetColumnDisplayData? child_CommentTargetColumn { get; set; }
        public CommentTargetCommentDisplayData? child_CommentTargetComment { get; set; }
    
        public static CommentDisplayData FromDbEntity(CommentDbEntity dbEntity) {
            var displayData = new CommentDisplayData {
                localRepositoryItemKey = new object?[] { dbEntity.ID }.ToJson(),
                existsInRemoteRepository = true,
                willBeChanged = false,
                willBeDeleted = false,
                own_members = new() {
                    ID = dbEntity?.ID,
                    Text = dbEntity?.Text,
                    Author = dbEntity?.Author,
                    CreatedOn = dbEntity?.CreatedOn,
                    UpdatedOn = dbEntity?.UpdatedOn,
                    Target = dbEntity?.Target,
                },
                child_CommentTargetRow = new CommentTargetRowDisplayData {
                    own_members = new() {
                        Row = new RowRefInfo {
                            __instanceKey = new object?[] {
                                dbEntity?.CommentTargetRow?.Row?.ID,
                            }.ToJson(),
                            ID = dbEntity?.CommentTargetRow?.Row?.ID,
                            Text = dbEntity?.CommentTargetRow?.Row?.Text,
                        },
                    },
                },
                child_CommentTargetCell = new CommentTargetCellDisplayData {
                    own_members = new() {
                        Cell = new AttrsRefInfo {
                            __instanceKey = new object?[] {
                                dbEntity?.CommentTargetCell?.Cell?.Attrs_ID,
                                dbEntity?.CommentTargetCell?.Cell?.ColType_Columns_ID,
                                dbEntity?.CommentTargetCell?.Cell?.ColType_ColumnId,
                            }.ToJson(),
                            ColType = new() {
                                ColumnId = dbEntity?.CommentTargetCell?.Cell?.ColType?.ColumnId,
                            },
                            Value = dbEntity?.CommentTargetCell?.Cell?.Value,
                        },
                    },
                },
                child_CommentTargetRowType = new CommentTargetRowTypeDisplayData {
                    own_members = new() {
                        RowType = new RowTypeRefInfo {
                            __instanceKey = new object?[] {
                                dbEntity?.CommentTargetRowType?.RowType?.ID,
                            }.ToJson(),
                            ID = dbEntity?.CommentTargetRowType?.RowType?.ID,
                        },
                    },
                },
                child_CommentTargetColumn = new CommentTargetColumnDisplayData {
                    own_members = new() {
                        Column = new ColumnsRefInfo {
                            __instanceKey = new object?[] {
                                dbEntity?.CommentTargetColumn?.Column?.Columns_ID,
                                dbEntity?.CommentTargetColumn?.Column?.ColumnId,
                            }.ToJson(),
                            ColumnId = dbEntity?.CommentTargetColumn?.Column?.ColumnId,
                        },
                    },
                },
                child_CommentTargetComment = new CommentTargetCommentDisplayData {
                    own_members = new() {
                        CommentId = dbEntity?.CommentTargetComment?.CommentId,
                    },
                },
            };
            return displayData;
        }
    }
    public class CommentDisplayDataOwnMembers {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public E_Target? Target { get; set; }
    }
    /// <summary>
    /// CommentTargetRowの画面表示用データ
    /// </summary>
    public partial class CommentTargetRowDisplayData {
        public CommentTargetRowDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class CommentTargetRowDisplayDataOwnMembers {
        public RowRefInfo? Row { get; set; }
    }
    /// <summary>
    /// CommentTargetCellの画面表示用データ
    /// </summary>
    public partial class CommentTargetCellDisplayData {
        public CommentTargetCellDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class CommentTargetCellDisplayDataOwnMembers {
        public AttrsRefInfo? Cell { get; set; }
    }
    /// <summary>
    /// CommentTargetRowTypeの画面表示用データ
    /// </summary>
    public partial class CommentTargetRowTypeDisplayData {
        public CommentTargetRowTypeDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class CommentTargetRowTypeDisplayDataOwnMembers {
        public RowTypeRefInfo? RowType { get; set; }
    }
    /// <summary>
    /// CommentTargetColumnの画面表示用データ
    /// </summary>
    public partial class CommentTargetColumnDisplayData {
        public CommentTargetColumnDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class CommentTargetColumnDisplayDataOwnMembers {
        public ColumnsRefInfo? Column { get; set; }
    }
    /// <summary>
    /// CommentTargetCommentの画面表示用データ
    /// </summary>
    public partial class CommentTargetCommentDisplayData {
        public CommentTargetCommentDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class CommentTargetCommentDisplayDataOwnMembers {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentRefInfo -----------------------
    /// <summary>
    /// Commentを参照する他のデータの画面上に表示されるCommentのデータ型。
    /// </summary>
    public partial class CommentRefInfo {
        /// <summary>
        /// Commentのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentRefInfo_CommentTargetComment? CommentTargetComment { get; set; }
    
        public static CommentRefInfo FromDbEntity(CommentDbEntity dbEntity) {
            var instance = new CommentRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.ID,
                }.ToJson(),
                ID = dbEntity.ID,
                Text = dbEntity.Text,
            };
            return instance;
        }
    }
    public partial class CommentRefInfo_CommentTargetComment {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentTargetRowRefInfo -----------------------
    /// <summary>
    /// CommentTargetRowを参照する他のデータの画面上に表示されるCommentTargetRowのデータ型。
    /// </summary>
    public partial class CommentTargetRowRefInfo {
        /// <summary>
        /// CommentTargetRowのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentTargetRowをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public CommentTargetRowRefInfo_Parent? Parent { get; set; }
    
        public static CommentTargetRowRefInfo FromDbEntity(CommentTargetRowDbEntity dbEntity) {
            var instance = new CommentTargetRowRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.CommentTargetRow_ID,
                }.ToJson(),
                
            };
            return instance;
        }
    }
    public partial class CommentTargetRowRefInfo_Parent {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetRowRefInfo_Parent_CommentTargetComment? CommentTargetComment { get; set; }
    }
    public partial class CommentTargetRowRefInfo_Parent_CommentTargetComment {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentTargetCellRefInfo -----------------------
    /// <summary>
    /// CommentTargetCellを参照する他のデータの画面上に表示されるCommentTargetCellのデータ型。
    /// </summary>
    public partial class CommentTargetCellRefInfo {
        /// <summary>
        /// CommentTargetCellのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentTargetCellをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public CommentTargetCellRefInfo_Parent? Parent { get; set; }
    
        public static CommentTargetCellRefInfo FromDbEntity(CommentTargetCellDbEntity dbEntity) {
            var instance = new CommentTargetCellRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.CommentTargetCell_ID,
                }.ToJson(),
                
            };
            return instance;
        }
    }
    public partial class CommentTargetCellRefInfo_Parent {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetCellRefInfo_Parent_CommentTargetComment? CommentTargetComment { get; set; }
    }
    public partial class CommentTargetCellRefInfo_Parent_CommentTargetComment {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentTargetRowTypeRefInfo -----------------------
    /// <summary>
    /// CommentTargetRowTypeを参照する他のデータの画面上に表示されるCommentTargetRowTypeのデータ型。
    /// </summary>
    public partial class CommentTargetRowTypeRefInfo {
        /// <summary>
        /// CommentTargetRowTypeのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentTargetRowTypeをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public CommentTargetRowTypeRefInfo_Parent? Parent { get; set; }
    
        public static CommentTargetRowTypeRefInfo FromDbEntity(CommentTargetRowTypeDbEntity dbEntity) {
            var instance = new CommentTargetRowTypeRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.CommentTargetRowType_ID,
                }.ToJson(),
                
            };
            return instance;
        }
    }
    public partial class CommentTargetRowTypeRefInfo_Parent {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetRowTypeRefInfo_Parent_CommentTargetComment? CommentTargetComment { get; set; }
    }
    public partial class CommentTargetRowTypeRefInfo_Parent_CommentTargetComment {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentTargetColumnRefInfo -----------------------
    /// <summary>
    /// CommentTargetColumnを参照する他のデータの画面上に表示されるCommentTargetColumnのデータ型。
    /// </summary>
    public partial class CommentTargetColumnRefInfo {
        /// <summary>
        /// CommentTargetColumnのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentTargetColumnをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public CommentTargetColumnRefInfo_Parent? Parent { get; set; }
    
        public static CommentTargetColumnRefInfo FromDbEntity(CommentTargetColumnDbEntity dbEntity) {
            var instance = new CommentTargetColumnRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.CommentTargetColumn_ID,
                }.ToJson(),
                
            };
            return instance;
        }
    }
    public partial class CommentTargetColumnRefInfo_Parent {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public CommentTargetColumnRefInfo_Parent_CommentTargetComment? CommentTargetComment { get; set; }
    }
    public partial class CommentTargetColumnRefInfo_Parent_CommentTargetComment {
        public string? CommentId { get; set; }
    }
    
    // ----------------------- CommentTargetCommentRefInfo -----------------------
    /// <summary>
    /// CommentTargetCommentを参照する他のデータの画面上に表示されるCommentTargetCommentのデータ型。
    /// </summary>
    public partial class CommentTargetCommentRefInfo {
        /// <summary>
        /// CommentTargetCommentのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentTargetCommentをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public CommentTargetCommentRefInfo_Parent? Parent { get; set; }
        public string? CommentId { get; set; }
    
        public static CommentTargetCommentRefInfo FromDbEntity(CommentTargetCommentDbEntity dbEntity) {
            var instance = new CommentTargetCommentRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.CommentTargetComment_ID,
                    dbEntity.CommentId,
                }.ToJson(),
                CommentId = dbEntity.CommentId,
            };
            return instance;
        }
    }
    public partial class CommentTargetCommentRefInfo_Parent {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }
#endregion データ構造クラス
}

namespace Katchly {
    using Katchly;
    using Microsoft.EntityFrameworkCore;

    partial class MyDbContext {
        public virtual DbSet<CommentDbEntity> CommentDbSet { get; set; }
        public virtual DbSet<CommentTargetRowDbEntity> CommentTargetRowDbSet { get; set; }
        public virtual DbSet<CommentTargetCellDbEntity> CommentTargetCellDbSet { get; set; }
        public virtual DbSet<CommentTargetRowTypeDbEntity> CommentTargetRowTypeDbSet { get; set; }
        public virtual DbSet<CommentTargetColumnDbEntity> CommentTargetColumnDbSet { get; set; }
        public virtual DbSet<CommentTargetCommentDbEntity> CommentTargetCommentDbSet { get; set; }

        private void OnModelCreating_Comment(ModelBuilder modelBuilder) {
            modelBuilder.Entity<Katchly.CommentDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.ID,
                });
            
                entity.Property(e => e.ID)
                    .IsRequired(true);
                entity.Property(e => e.Text)
                    .IsRequired(false);
                entity.Property(e => e.Author)
                    .IsRequired(false);
                entity.Property(e => e.CreatedOn)
                    .IsRequired(false);
                entity.Property(e => e.UpdatedOn)
                    .IsRequired(false);
                entity.Property(e => e.Target)
                    .IsRequired(false);
            
                entity.HasOne(e => e.CommentTargetRow)
                    .WithOne(e => e.Parent)
                    .HasForeignKey<CommentTargetRowDbEntity>(e => new {
                        e.CommentTargetRow_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
                entity.HasOne(e => e.CommentTargetCell)
                    .WithOne(e => e.Parent)
                    .HasForeignKey<CommentTargetCellDbEntity>(e => new {
                        e.CommentTargetCell_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
                entity.HasOne(e => e.CommentTargetRowType)
                    .WithOne(e => e.Parent)
                    .HasForeignKey<CommentTargetRowTypeDbEntity>(e => new {
                        e.CommentTargetRowType_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
                entity.HasOne(e => e.CommentTargetColumn)
                    .WithOne(e => e.Parent)
                    .HasForeignKey<CommentTargetColumnDbEntity>(e => new {
                        e.CommentTargetColumn_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
                entity.HasOne(e => e.CommentTargetComment)
                    .WithOne(e => e.Parent)
                    .HasForeignKey<CommentTargetCommentDbEntity>(e => new {
                        e.CommentTargetComment_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
            });
            modelBuilder.Entity<Katchly.CommentTargetRowDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.CommentTargetRow_ID,
                });
            
                entity.Property(e => e.Row_ID)
                    .IsRequired(false);
                entity.Property(e => e.CommentTargetRow_ID)
                    .IsRequired(true);
            
                
            });
            modelBuilder.Entity<Katchly.CommentTargetCellDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.CommentTargetCell_ID,
                });
            
                entity.Property(e => e.Cell_Attrs_ID)
                    .IsRequired(false);
                entity.Property(e => e.Cell_ColType_Columns_ID)
                    .IsRequired(false);
                entity.Property(e => e.Cell_ColType_ColumnId)
                    .IsRequired(false);
                entity.Property(e => e.CommentTargetCell_ID)
                    .IsRequired(true);
            
                
            });
            modelBuilder.Entity<Katchly.CommentTargetRowTypeDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.CommentTargetRowType_ID,
                });
            
                entity.Property(e => e.RowType_ID)
                    .IsRequired(false);
                entity.Property(e => e.CommentTargetRowType_ID)
                    .IsRequired(true);
            
                
            });
            modelBuilder.Entity<Katchly.CommentTargetColumnDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.CommentTargetColumn_ID,
                });
            
                entity.Property(e => e.Column_Columns_ID)
                    .IsRequired(false);
                entity.Property(e => e.Column_ColumnId)
                    .IsRequired(false);
                entity.Property(e => e.CommentTargetColumn_ID)
                    .IsRequired(true);
            
                
            });
            modelBuilder.Entity<Katchly.CommentTargetCommentDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.CommentTargetComment_ID,
                    e.CommentId,
                });
            
                entity.Property(e => e.CommentTargetComment_ID)
                    .IsRequired(true);
                entity.Property(e => e.CommentId)
                    .IsRequired(true);
            
                
            });
        }
    }
}
