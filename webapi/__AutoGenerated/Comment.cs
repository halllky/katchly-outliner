namespace Katchly {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Katchly;

    [ApiController]
    [Route("api/[controller]")]
    public partial class CommentController : ControllerBase {
        public CommentController(ILogger<CommentController> logger, AutoGeneratedApplicationService applicationService) {
            _logger = logger;
            _applicationService = applicationService;
        }
        protected readonly ILogger<CommentController> _logger;
        protected readonly AutoGeneratedApplicationService _applicationService;

        [HttpPost("create")]
        public virtual IActionResult Create([FromBody] CommentCreateCommand param) {
            if (_applicationService.CreateComment(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpGet("detail/{ID}")]
        public virtual IActionResult Find(string? ID) {
            if (ID == null) return BadRequest();
            var instance = _applicationService.FindComment(ID);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        [HttpPost("update")]
        public virtual IActionResult Update(CommentSaveCommand param) {
            if (_applicationService.UpdateComment(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpDelete("delete")]
        public virtual IActionResult Delete(CommentSaveCommand param) {
            if (_applicationService.DeleteComment(param, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpPost("load")]
        public virtual IActionResult Load([FromBody]CommentSearchCondition? filter, [FromQuery] int? skip, [FromQuery] int? take) {
            var instances = _applicationService.LoadComment(filter, skip, take);
            return this.JsonContent(instances.ToArray());
        }
        [HttpGet("list-by-keyword")]
        public virtual IActionResult SearchByKeywordxcc9c15b1503ef15d999d64ce6d5fe189([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordComment(keyword);
            return this.JsonContent(items);
        }
    }


    partial class AutoGeneratedApplicationService {
        public virtual bool CreateComment(CommentCreateCommand command, out CommentDisplayData created, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeCreateEventArgs<CommentCreateCommand> {
                Data = command,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentCreating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                created = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var dbEntity = command.ToDbEntity();
            DbContext.Add(dbEntity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new CommentDisplayData();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }
        
            var afterUpdate = this.FindComment(dbEntity.ID);
            if (afterUpdate == null) {
                created = new CommentDisplayData();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }
        
            var afterSaveEventArg = new AfterCreateEventArgs<CommentCreateCommand>  {
                Created = command,
            };
            OnCommentCreated(afterSaveEventArg);
        
            created = afterUpdate;
            errors = new List<string>();
        
            return true;
        }
        
        /// <summary>
        /// Commentの新規登録前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnCommentCreating(IBeforeCreateEventArgs<CommentCreateCommand> arg) { }
        /// <summary>
        /// Commentの新規登録SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentCreated(IAfterCreateEventArgs<CommentCreateCommand> arg) { }
        
        /// <summary>
        /// Commentのキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public virtual CommentDisplayData? FindComment(string? ID) {
        
            var entity = DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.TargetRow)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetRowType)
                .Include(x => x.TargetColumn)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.TargetColumn)
                .SingleOrDefault(x => x.ID == ID);
        
            if (entity == null) return null;
        
            var aggregateInstance = CommentDisplayData.FromDbEntity(entity);
            return aggregateInstance;
        }
        public virtual bool UpdateComment(CommentSaveCommand after, out CommentDisplayData updated, out ICollection<string> errors) {
            errors = new List<string>();
        
            var beforeDbEntity = DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.TargetRow)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetRowType)
                .Include(x => x.TargetColumn)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.TargetColumn)
                .SingleOrDefault(x => x.ID == after.ID);
        
            if (beforeDbEntity == null) {
                updated = new CommentDisplayData();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }
        
            var beforeUpdate = CommentSaveCommand.FromDbEntity(beforeDbEntity);
        
            var beforeSaveEventArg = new BeforeUpdateEventArgs<CommentSaveCommand> {
                Before = beforeUpdate,
                After = after,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentUpdating(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                updated = new();
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var afterDbEntity = after.ToDbEntity();
        
            // Attach
            DbContext.Entry(afterDbEntity).State = EntityState.Modified;
        
            
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new CommentDisplayData();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }
        
            var afterUpdate = this.FindComment(after.ID);
            if (afterUpdate == null) {
                updated = new CommentDisplayData();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
        
            var afterSaveEventArg = new AfterUpdateEventArgs<CommentSaveCommand> {
                BeforeUpdate = beforeUpdate,
                AfterUpdate = after,
            };
            OnCommentUpdated(afterSaveEventArg);
        
            updated = afterUpdate;
            return true;
        }
        
        /// <summary>
        /// Commentの更新前に実行されます。
        /// エラーチェック、ワーニング、自動算出項目の設定などを行います。
        /// </summary>
        protected virtual void OnCommentUpdating(IBeforeUpdateEventArgs<CommentSaveCommand> arg) { }
        /// <summary>
        /// Commentの更新SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentUpdated(IAfterUpdateEventArgs<CommentSaveCommand> arg) { }
        
        public virtual bool DeleteComment(CommentSaveCommand data, out ICollection<string> errors) {
        
            var beforeSaveEventArg = new BeforeDeleteEventArgs<CommentSaveCommand> {
                Data = data,
                IgnoreConfirm = false, // TODO: ワーニングの仕組みを作る
            };
            OnCommentDeleting(beforeSaveEventArg);
            if (beforeSaveEventArg.Errors.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray();
                return false;
            }
            if (beforeSaveEventArg.Confirms.Count > 0) {
                errors = beforeSaveEventArg.Errors.Select(err => err.Message).ToArray(); // TODO: ワーニングの仕組みを作る
                return false;
            }
        
            var entity = DbContext.CommentDbSet
                .Include(x => x.TargetRow)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetRowType)
                .Include(x => x.TargetColumn)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.TargetColumn)
                .SingleOrDefault(x => x.ID == data.ID);
        
            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }
        
            var deleted = CommentSaveCommand.FromDbEntity(entity);
        
            DbContext.Remove(entity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }
        
            var afterSaveEventArg = new AfterDeleteEventArgs<CommentSaveCommand> {
                Deleted = deleted,
            };
            OnCommentDeleted(afterSaveEventArg);
        
            errors = Array.Empty<string>();
            return true;
        }
        
        /// <summary>
        /// Commentの削除前に実行されます。
        /// エラーチェック、ワーニングなどを行います。
        /// </summary>
        protected virtual void OnCommentDeleting(IBeforeDeleteEventArgs<CommentSaveCommand> arg) { }
        
        /// <summary>
        /// Commentの削除SQL発効後、コミット前に実行されます。
        /// </summary>
        protected virtual void OnCommentDeleted(IAfterDeleteEventArgs<CommentSaveCommand> arg) { }
        
        /// <summary>
        /// Commentを検索して返します。
        /// </summary>
        public virtual IEnumerable<CommentDisplayData> LoadComment(CommentSearchCondition? filter, int? skip, int? take) {
        
            var query = (IQueryable<CommentDbEntity>)DbContext.CommentDbSet
                .AsNoTracking()
                .Include(x => x.TargetRow)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetRowType)
                .Include(x => x.TargetColumn)
                .ThenInclude(x => x.Parent)
                .Include(x => x.TargetCell)
                .ThenInclude(x => x.ColType)
                .Include(x => x.TargetColumn)
                ;
        
            // 絞り込み
            if (!string.IsNullOrWhiteSpace(filter?.ID)) {
                query = query.Where(x => x.ID == filter.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.Text)) {
                var trimmed = filter.Text.Trim();
                query = query.Where(x => x.Text.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.Author)) {
                var trimmed = filter.Author.Trim();
                query = query.Where(x => x.Author.Contains(trimmed));
            }
            if (filter?.Indent?.From != default) {
                query = query.Where(x => x.Indent >= filter.Indent.From);
            }
            if (filter?.Indent?.To != default) {
                query = query.Where(x => x.Indent <= filter.Indent.To);
            }
            if (filter?.Order?.From != default) {
                query = query.Where(x => x.Order >= filter.Order.From);
            }
            if (filter?.Order?.To != default) {
                query = query.Where(x => x.Order <= filter.Order.To);
            }
            if (filter?.CreatedOn?.From != default) {
                query = query.Where(x => x.CreatedOn >= filter.CreatedOn.From);
            }
            if (filter?.CreatedOn?.To != default) {
                query = query.Where(x => x.CreatedOn <= filter.CreatedOn.To);
            }
            if (filter?.UpdatedOn?.From != default) {
                query = query.Where(x => x.UpdatedOn >= filter.UpdatedOn.From);
            }
            if (filter?.UpdatedOn?.To != default) {
                query = query.Where(x => x.UpdatedOn <= filter.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.ID)) {
                query = query.Where(x => x.TargetRow.ID == filter.TargetRow.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.Text)) {
                var trimmed = filter.TargetRow.Text.Trim();
                query = query.Where(x => x.TargetRow.Text.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.RowType?.ID)) {
                query = query.Where(x => x.TargetRow.RowType.ID == filter.TargetRow.RowType.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.RowType?.RowTypeName)) {
                var trimmed = filter.TargetRow.RowType.RowTypeName.Trim();
                query = query.Where(x => x.TargetRow.RowType.RowTypeName.Contains(trimmed));
            }
            if (filter?.TargetRow?.RowType?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetRow.RowType.CreatedOn >= filter.TargetRow.RowType.CreatedOn.From);
            }
            if (filter?.TargetRow?.RowType?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetRow.RowType.CreatedOn <= filter.TargetRow.RowType.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.RowType?.CreateUser)) {
                var trimmed = filter.TargetRow.RowType.CreateUser.Trim();
                query = query.Where(x => x.TargetRow.RowType.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetRow?.RowType?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetRow.RowType.UpdatedOn >= filter.TargetRow.RowType.UpdatedOn.From);
            }
            if (filter?.TargetRow?.RowType?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetRow.RowType.UpdatedOn <= filter.TargetRow.RowType.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.RowType?.UpdateUser)) {
                var trimmed = filter.TargetRow.RowType.UpdateUser.Trim();
                query = query.Where(x => x.TargetRow.RowType.UpdateUser.Contains(trimmed));
            }
            if (filter?.TargetRow?.Indent?.From != default) {
                query = query.Where(x => x.TargetRow.Indent >= filter.TargetRow.Indent.From);
            }
            if (filter?.TargetRow?.Indent?.To != default) {
                query = query.Where(x => x.TargetRow.Indent <= filter.TargetRow.Indent.To);
            }
            if (filter?.TargetRow?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetRow.CreatedOn >= filter.TargetRow.CreatedOn.From);
            }
            if (filter?.TargetRow?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetRow.CreatedOn <= filter.TargetRow.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.CreateUser)) {
                var trimmed = filter.TargetRow.CreateUser.Trim();
                query = query.Where(x => x.TargetRow.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetRow?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetRow.UpdatedOn >= filter.TargetRow.UpdatedOn.From);
            }
            if (filter?.TargetRow?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetRow.UpdatedOn <= filter.TargetRow.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRow?.UpdateUser)) {
                var trimmed = filter.TargetRow.UpdateUser.Trim();
                query = query.Where(x => x.TargetRow.UpdateUser.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.ID)) {
                query = query.Where(x => x.TargetCell.Parent.ID == filter.TargetCell.Parent.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.Text)) {
                var trimmed = filter.TargetCell.Parent.Text.Trim();
                query = query.Where(x => x.TargetCell.Parent.Text.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.RowType?.ID)) {
                query = query.Where(x => x.TargetCell.Parent.RowType.ID == filter.TargetCell.Parent.RowType.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.RowType?.RowTypeName)) {
                var trimmed = filter.TargetCell.Parent.RowType.RowTypeName.Trim();
                query = query.Where(x => x.TargetCell.Parent.RowType.RowTypeName.Contains(trimmed));
            }
            if (filter?.TargetCell?.Parent?.RowType?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.Parent.RowType.CreatedOn >= filter.TargetCell.Parent.RowType.CreatedOn.From);
            }
            if (filter?.TargetCell?.Parent?.RowType?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.Parent.RowType.CreatedOn <= filter.TargetCell.Parent.RowType.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.RowType?.CreateUser)) {
                var trimmed = filter.TargetCell.Parent.RowType.CreateUser.Trim();
                query = query.Where(x => x.TargetCell.Parent.RowType.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetCell?.Parent?.RowType?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.Parent.RowType.UpdatedOn >= filter.TargetCell.Parent.RowType.UpdatedOn.From);
            }
            if (filter?.TargetCell?.Parent?.RowType?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.Parent.RowType.UpdatedOn <= filter.TargetCell.Parent.RowType.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.RowType?.UpdateUser)) {
                var trimmed = filter.TargetCell.Parent.RowType.UpdateUser.Trim();
                query = query.Where(x => x.TargetCell.Parent.RowType.UpdateUser.Contains(trimmed));
            }
            if (filter?.TargetCell?.Parent?.Indent?.From != default) {
                query = query.Where(x => x.TargetCell.Parent.Indent >= filter.TargetCell.Parent.Indent.From);
            }
            if (filter?.TargetCell?.Parent?.Indent?.To != default) {
                query = query.Where(x => x.TargetCell.Parent.Indent <= filter.TargetCell.Parent.Indent.To);
            }
            if (filter?.TargetCell?.Parent?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.Parent.CreatedOn >= filter.TargetCell.Parent.CreatedOn.From);
            }
            if (filter?.TargetCell?.Parent?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.Parent.CreatedOn <= filter.TargetCell.Parent.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.CreateUser)) {
                var trimmed = filter.TargetCell.Parent.CreateUser.Trim();
                query = query.Where(x => x.TargetCell.Parent.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetCell?.Parent?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.Parent.UpdatedOn >= filter.TargetCell.Parent.UpdatedOn.From);
            }
            if (filter?.TargetCell?.Parent?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.Parent.UpdatedOn <= filter.TargetCell.Parent.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Parent?.UpdateUser)) {
                var trimmed = filter.TargetCell.Parent.UpdateUser.Trim();
                query = query.Where(x => x.TargetCell.Parent.UpdateUser.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.Parent?.ID)) {
                query = query.Where(x => x.TargetCell.ColType.Parent.ID == filter.TargetCell.ColType.Parent.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.Parent?.RowTypeName)) {
                var trimmed = filter.TargetCell.ColType.Parent.RowTypeName.Trim();
                query = query.Where(x => x.TargetCell.ColType.Parent.RowTypeName.Contains(trimmed));
            }
            if (filter?.TargetCell?.ColType?.Parent?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.ColType.Parent.CreatedOn >= filter.TargetCell.ColType.Parent.CreatedOn.From);
            }
            if (filter?.TargetCell?.ColType?.Parent?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.ColType.Parent.CreatedOn <= filter.TargetCell.ColType.Parent.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.Parent?.CreateUser)) {
                var trimmed = filter.TargetCell.ColType.Parent.CreateUser.Trim();
                query = query.Where(x => x.TargetCell.ColType.Parent.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetCell?.ColType?.Parent?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.ColType.Parent.UpdatedOn >= filter.TargetCell.ColType.Parent.UpdatedOn.From);
            }
            if (filter?.TargetCell?.ColType?.Parent?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.ColType.Parent.UpdatedOn <= filter.TargetCell.ColType.Parent.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.Parent?.UpdateUser)) {
                var trimmed = filter.TargetCell.ColType.Parent.UpdateUser.Trim();
                query = query.Where(x => x.TargetCell.ColType.Parent.UpdateUser.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.ColumnId)) {
                query = query.Where(x => x.TargetCell.ColType.ColumnId == filter.TargetCell.ColType.ColumnId);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.ColType?.ColumnName)) {
                var trimmed = filter.TargetCell.ColType.ColumnName.Trim();
                query = query.Where(x => x.TargetCell.ColType.ColumnName.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetCell?.Value)) {
                var trimmed = filter.TargetCell.Value.Trim();
                query = query.Where(x => x.TargetCell.Value.Contains(trimmed));
            }
            if (filter?.TargetCell?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetCell.UpdatedOn >= filter.TargetCell.UpdatedOn.From);
            }
            if (filter?.TargetCell?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetCell.UpdatedOn <= filter.TargetCell.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRowType?.ID)) {
                query = query.Where(x => x.TargetRowType.ID == filter.TargetRowType.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRowType?.RowTypeName)) {
                var trimmed = filter.TargetRowType.RowTypeName.Trim();
                query = query.Where(x => x.TargetRowType.RowTypeName.Contains(trimmed));
            }
            if (filter?.TargetRowType?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetRowType.CreatedOn >= filter.TargetRowType.CreatedOn.From);
            }
            if (filter?.TargetRowType?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetRowType.CreatedOn <= filter.TargetRowType.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRowType?.CreateUser)) {
                var trimmed = filter.TargetRowType.CreateUser.Trim();
                query = query.Where(x => x.TargetRowType.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetRowType?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetRowType.UpdatedOn >= filter.TargetRowType.UpdatedOn.From);
            }
            if (filter?.TargetRowType?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetRowType.UpdatedOn <= filter.TargetRowType.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetRowType?.UpdateUser)) {
                var trimmed = filter.TargetRowType.UpdateUser.Trim();
                query = query.Where(x => x.TargetRowType.UpdateUser.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.Parent?.ID)) {
                query = query.Where(x => x.TargetColumn.Parent.ID == filter.TargetColumn.Parent.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.Parent?.RowTypeName)) {
                var trimmed = filter.TargetColumn.Parent.RowTypeName.Trim();
                query = query.Where(x => x.TargetColumn.Parent.RowTypeName.Contains(trimmed));
            }
            if (filter?.TargetColumn?.Parent?.CreatedOn?.From != default) {
                query = query.Where(x => x.TargetColumn.Parent.CreatedOn >= filter.TargetColumn.Parent.CreatedOn.From);
            }
            if (filter?.TargetColumn?.Parent?.CreatedOn?.To != default) {
                query = query.Where(x => x.TargetColumn.Parent.CreatedOn <= filter.TargetColumn.Parent.CreatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.Parent?.CreateUser)) {
                var trimmed = filter.TargetColumn.Parent.CreateUser.Trim();
                query = query.Where(x => x.TargetColumn.Parent.CreateUser.Contains(trimmed));
            }
            if (filter?.TargetColumn?.Parent?.UpdatedOn?.From != default) {
                query = query.Where(x => x.TargetColumn.Parent.UpdatedOn >= filter.TargetColumn.Parent.UpdatedOn.From);
            }
            if (filter?.TargetColumn?.Parent?.UpdatedOn?.To != default) {
                query = query.Where(x => x.TargetColumn.Parent.UpdatedOn <= filter.TargetColumn.Parent.UpdatedOn.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.Parent?.UpdateUser)) {
                var trimmed = filter.TargetColumn.Parent.UpdateUser.Trim();
                query = query.Where(x => x.TargetColumn.Parent.UpdateUser.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.ColumnId)) {
                query = query.Where(x => x.TargetColumn.ColumnId == filter.TargetColumn.ColumnId);
            }
            if (!string.IsNullOrWhiteSpace(filter?.TargetColumn?.ColumnName)) {
                var trimmed = filter.TargetColumn.ColumnName.Trim();
                query = query.Where(x => x.TargetColumn.ColumnName.Contains(trimmed));
            }
        
            // 順番
            query = query
                .OrderBy(x => x.ID)
                ;
        
            // ページング
            if (skip != null) query = query.Skip(skip.Value);
            if (take != null) query = query.Take(take.Value);
        
            return query
                .AsEnumerable()
                .Select(entity => CommentDisplayData.FromDbEntity(entity));
        }
        /// <summary>
        /// Commentをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<CommentRefInfo> SearchByKeywordComment(string? keyword) {
            var query = (IQueryable<CommentDbEntity>)DbContext.CommentDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.ID, like)
                                         || EF.Functions.Like(item.Text, like));
            }
        
            var results = query
                .OrderBy(m => m.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => CommentRefInfo.FromDbEntity(entity));
        
            return results;
        }
    }


#region データ構造クラス
    /// <summary>
    /// Commentのデータ作成コマンドです。
    /// </summary>
    public partial class CommentCreateCommand {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public int? Indent { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public RowKeys? TargetRow { get; set; }
        public AttrsKeys? TargetCell { get; set; }
        public RowTypeKeys? TargetRowType { get; set; }
        public ColumnsKeys? TargetColumn { get; set; }
    
        /// <summary>
        /// Commentのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.CommentDbEntity ToDbEntity() {
            return new Katchly.CommentDbEntity {
                TargetRow_ID = this.TargetRow?.ID,
                TargetCell_Attrs_ID = this.TargetCell?.Parent?.ID,
                TargetCell_ColType_Columns_ID = this.TargetCell?.ColType?.Parent?.ID,
                TargetRowType_ID = this.TargetRowType?.ID,
                TargetColumn_Columns_ID = this.TargetColumn?.Parent?.ID,
                TargetCell_ColType_ColumnId = this.TargetCell?.ColType?.ColumnId,
                TargetColumn_ColumnId = this.TargetColumn?.ColumnId,
                ID = this.ID,
                Text = this.Text,
                Author = this.Author,
                Indent = this.Indent,
                Order = this.Order,
                CreatedOn = this.CreatedOn,
                UpdatedOn = this.UpdatedOn,
            };
        }
    }
    /// <summary>
    /// Commentのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class CommentSaveCommand {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public int? Indent { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public RowKeys? TargetRow { get; set; }
        public AttrsKeys? TargetCell { get; set; }
        public RowTypeKeys? TargetRowType { get; set; }
        public ColumnsKeys? TargetColumn { get; set; }
    
        /// <summary>
        /// Commentのオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public Katchly.CommentDbEntity ToDbEntity() {
            return new Katchly.CommentDbEntity {
                TargetRow_ID = this.TargetRow?.ID,
                TargetCell_Attrs_ID = this.TargetCell?.Parent?.ID,
                TargetCell_ColType_Columns_ID = this.TargetCell?.ColType?.Parent?.ID,
                TargetRowType_ID = this.TargetRowType?.ID,
                TargetColumn_Columns_ID = this.TargetColumn?.Parent?.ID,
                TargetCell_ColType_ColumnId = this.TargetCell?.ColType?.ColumnId,
                TargetColumn_ColumnId = this.TargetColumn?.ColumnId,
                ID = this.ID,
                Text = this.Text,
                Author = this.Author,
                Indent = this.Indent,
                Order = this.Order,
                CreatedOn = this.CreatedOn,
                UpdatedOn = this.UpdatedOn,
            };
        }
        /// <summary>
        /// Commentのデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static CommentSaveCommand FromDbEntity(Katchly.CommentDbEntity entity) {
            var instance = new CommentSaveCommand {
                ID = entity.ID,
                Text = entity.Text,
                Author = entity.Author,
                Indent = entity.Indent,
                Order = entity.Order,
                CreatedOn = entity.CreatedOn,
                UpdatedOn = entity.UpdatedOn,
                TargetRow = new RowKeys() {
                    ID = entity.TargetRow?.ID,
                },
                TargetCell = new AttrsKeys() {
                    Parent = new RowKeys() {
                        ID = entity.TargetCell?.Parent?.ID,
                    },
                    ColType = new ColumnsKeys() {
                        Parent = new RowTypeKeys() {
                            ID = entity.TargetCell?.ColType?.Parent?.ID,
                        },
                        ColumnId = entity.TargetCell?.ColType?.ColumnId,
                    },
                },
                TargetRowType = new RowTypeKeys() {
                    ID = entity.TargetRowType?.ID,
                },
                TargetColumn = new ColumnsKeys() {
                    Parent = new RowTypeKeys() {
                        ID = entity.TargetColumn?.Parent?.ID,
                    },
                    ColumnId = entity.TargetColumn?.ColumnId,
                },
            };
            return instance;
        }
    }
    public class CommentSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public FromTo<int?> Indent { get; set; } = new();
        public FromTo<int?> Order { get; set; } = new();
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public Comment_TargetRowSearchCondition TargetRow { get; set; } = new();
        public Comment_TargetCellSearchCondition TargetCell { get; set; } = new();
        public Comment_TargetRowTypeSearchCondition TargetRowType { get; set; } = new();
        public Comment_TargetColumnSearchCondition TargetColumn { get; set; } = new();
    }
    public class Comment_TargetRowSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public Comment_TargetRow_RowTypeSearchCondition RowType { get; set; } = new();
        public FromTo<int?> Indent { get; set; } = new();
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetRow_RowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetCellSearchCondition {
        public Comment_TargetCell_ParentSearchCondition Parent { get; set; } = new();
        public Comment_TargetCell_ColTypeSearchCondition ColType { get; set; } = new();
        public string? Value { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
    }
    public class Comment_TargetCell_ParentSearchCondition {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public Comment_TargetCell_Parent_RowTypeSearchCondition RowType { get; set; } = new();
        public FromTo<int?> Indent { get; set; } = new();
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetCell_Parent_RowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetCell_ColTypeSearchCondition {
        public Comment_TargetCell_ColType_ParentSearchCondition Parent { get; set; } = new();
        public string? ColumnId { get; set; }
        public string? ColumnName { get; set; }
    }
    public class Comment_TargetCell_ColType_ParentSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetRowTypeSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class Comment_TargetColumnSearchCondition {
        public Comment_TargetColumn_ParentSearchCondition Parent { get; set; } = new();
        public string? ColumnId { get; set; }
        public string? ColumnName { get; set; }
    }
    public class Comment_TargetColumn_ParentSearchCondition {
        public string? ID { get; set; }
        public string? RowTypeName { get; set; }
        public FromTo<DateTime?> CreatedOn { get; set; } = new();
        public string? CreateUser { get; set; }
        public FromTo<DateTime?> UpdatedOn { get; set; } = new();
        public string? UpdateUser { get; set; }
    }
    public class CommentKeys {
        [Key]
        public string? ID { get; set; }
    }
    /// <summary>
    /// Commentのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class CommentDbEntity {
        public string? TargetRow_ID { get; set; }
        public string? TargetCell_Attrs_ID { get; set; }
        public string? TargetCell_ColType_Columns_ID { get; set; }
        public string? TargetRowType_ID { get; set; }
        public string? TargetColumn_Columns_ID { get; set; }
        public string? TargetCell_ColType_ColumnId { get; set; }
        public string? TargetColumn_ColumnId { get; set; }
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public int? Indent { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
    
        public virtual RowDbEntity? TargetRow { get; set; }
        public virtual AttrsDbEntity? TargetCell { get; set; }
        public virtual RowTypeDbEntity? TargetRowType { get; set; }
        public virtual ColumnsDbEntity? TargetColumn { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(CommentDbEntity entity) {
            if (entity.ID != this.ID) return false;
            return true;
        }
    }
    /// <summary>
    /// Commentの画面表示用データ
    /// </summary>
    public partial class CommentDisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public CommentDisplayDataOwnMembers own_members { get; set; } = new();
    
        public static CommentDisplayData FromDbEntity(CommentDbEntity dbEntity) {
            var displayData = new CommentDisplayData {
                localRepositoryItemKey = new object?[] { dbEntity.ID }.ToJson(),
                existsInRemoteRepository = true,
                willBeChanged = false,
                willBeDeleted = false,
                own_members = new() {
                    ID = dbEntity?.ID,
                    Text = dbEntity?.Text,
                    Author = dbEntity?.Author,
                    Indent = dbEntity?.Indent,
                    Order = dbEntity?.Order,
                    CreatedOn = dbEntity?.CreatedOn,
                    UpdatedOn = dbEntity?.UpdatedOn,
                    TargetRow = new RowRefInfo {
                        __instanceKey = new object?[] {
                            dbEntity?.TargetRow?.ID,
                        }.ToJson(),
                        ID = dbEntity?.TargetRow?.ID,
                        Text = dbEntity?.TargetRow?.Text,
                    },
                    TargetCell = new AttrsRefInfo {
                        __instanceKey = new object?[] {
                            dbEntity?.TargetCell?.Attrs_ID,
                            dbEntity?.TargetCell?.ColType_Columns_ID,
                            dbEntity?.TargetCell?.ColType_ColumnId,
                        }.ToJson(),
                        ColType = new() {
                            ColumnId = dbEntity?.TargetCell?.ColType?.ColumnId,
                        },
                        Value = dbEntity?.TargetCell?.Value,
                    },
                    TargetRowType = new RowTypeRefInfo {
                        __instanceKey = new object?[] {
                            dbEntity?.TargetRowType?.ID,
                        }.ToJson(),
                        ID = dbEntity?.TargetRowType?.ID,
                    },
                    TargetColumn = new ColumnsRefInfo {
                        __instanceKey = new object?[] {
                            dbEntity?.TargetColumn?.Columns_ID,
                            dbEntity?.TargetColumn?.ColumnId,
                        }.ToJson(),
                        ColumnId = dbEntity?.TargetColumn?.ColumnId,
                    },
                },
            };
            return displayData;
        }
    }
    public class CommentDisplayDataOwnMembers {
        public string? ID { get; set; }
        public string? Text { get; set; }
        public string? Author { get; set; }
        public int? Indent { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedOn { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public RowRefInfo? TargetRow { get; set; }
        public AttrsRefInfo? TargetCell { get; set; }
        public RowTypeRefInfo? TargetRowType { get; set; }
        public ColumnsRefInfo? TargetColumn { get; set; }
    }
    
    // ----------------------- CommentRefInfo -----------------------
    /// <summary>
    /// Commentを参照する他のデータの画面上に表示されるCommentのデータ型。
    /// </summary>
    public partial class CommentRefInfo {
        /// <summary>
        /// Commentのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のCommentをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public string? ID { get; set; }
        public string? Text { get; set; }
    
        public static CommentRefInfo FromDbEntity(CommentDbEntity dbEntity) {
            var instance = new CommentRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.ID,
                }.ToJson(),
                ID = dbEntity.ID,
                Text = dbEntity.Text,
            };
            return instance;
        }
    }
#endregion データ構造クラス
}

namespace Katchly {
    using Katchly;
    using Microsoft.EntityFrameworkCore;

    partial class MyDbContext {
        public virtual DbSet<CommentDbEntity> CommentDbSet { get; set; }

        private void OnModelCreating_Comment(ModelBuilder modelBuilder) {
            modelBuilder.Entity<Katchly.CommentDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.ID,
                });
            
                entity.Property(e => e.TargetRow_ID)
                    .IsRequired(false);
                entity.Property(e => e.TargetCell_Attrs_ID)
                    .IsRequired(false);
                entity.Property(e => e.TargetCell_ColType_Columns_ID)
                    .IsRequired(false);
                entity.Property(e => e.TargetRowType_ID)
                    .IsRequired(false);
                entity.Property(e => e.TargetColumn_Columns_ID)
                    .IsRequired(false);
                entity.Property(e => e.TargetCell_ColType_ColumnId)
                    .IsRequired(false);
                entity.Property(e => e.TargetColumn_ColumnId)
                    .IsRequired(false);
                entity.Property(e => e.ID)
                    .IsRequired(true);
                entity.Property(e => e.Text)
                    .IsRequired(false);
                entity.Property(e => e.Author)
                    .IsRequired(false);
                entity.Property(e => e.Indent)
                    .IsRequired(false);
                entity.Property(e => e.Order)
                    .IsRequired(false);
                entity.Property(e => e.CreatedOn)
                    .IsRequired(false);
                entity.Property(e => e.UpdatedOn)
                    .IsRequired(false);
            
                
            });
        }
    }
}
