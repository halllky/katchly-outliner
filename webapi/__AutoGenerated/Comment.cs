namespace Katchly {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using Katchly;

    /// <summary>
    /// Commentに関する Web API 操作を提供する ASP.NET Core のコントローラー
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public partial class CommentController : ControllerBase {
        public CommentController(ILogger<CommentController> logger, AutoGeneratedApplicationService applicationService) {
            _logger = logger;
            _applicationService = applicationService;
        }
        protected readonly ILogger<CommentController> _logger;
        protected readonly AutoGeneratedApplicationService _applicationService;

        /// <summary>
        /// 新しいCommentを作成する情報を受け取って登録する Web API
        /// </summary>
        [HttpPost("create")]
        public virtual IActionResult Create([FromBody] CommentCreateCommand param) {
            if (_applicationService.CreateComment(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        /// <summary>
        /// 既存のCommentをキーで1件検索する Web API
        /// </summary>
        [HttpGet("detail/{ID}")]
        public virtual IActionResult Find(string? ID) {
            if (ID == null) return BadRequest();
            var instance = _applicationService.FindComment(ID);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        /// <summary>
        /// 既存のCommentを更新する Web API
        /// </summary>
        [HttpPost("update")]
        public virtual IActionResult Update(CommentSaveCommand param) {
            if (_applicationService.UpdateComment(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        /// <summary>
        /// 既存のCommentを削除する Web API
        /// </summary>
        [HttpDelete("delete")]
        public virtual IActionResult Delete(CommentSaveCommand param) {
            if (_applicationService.DeleteComment(param, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        /// <summary>
        /// 既存のCommentを一覧検索する Web API
        /// </summary>
        [HttpPost("load")]
        public virtual IActionResult Load([FromBody]CommentSearchCondition? filter, [FromQuery] int? skip, [FromQuery] int? take) {
            var instances = _applicationService.LoadComment(filter, skip, take);
            return this.JsonContent(instances.ToArray());
        }
        /// <summary>
        /// 既存のCommentをキーワードで一覧検索する Web API
        /// </summary>
        [HttpGet("list-by-keyword")]
        public virtual IActionResult SearchByKeywordxcc9c15b1503ef15d999d64ce6d5fe189([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordComment(keyword);
            return this.JsonContent(items);
        }
    }
}
