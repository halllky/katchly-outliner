namespace Katchly {

    internal static class DefaultConfigurer {

        /// <summary>
        /// Webサーバー起動時初期設定
        /// </summary>
        internal static void InitWebHostBuilder(this WebApplicationBuilder builder) {
            ConfigureServices(builder.Services);

            // HTMLのエンコーディングをUTF-8にする(日本語のHTMLエンコード防止)
            builder.Services.Configure<Microsoft.Extensions.WebEncoders.WebEncoderOptions>(options => {
                options.TextEncoderSettings = new System.Text.Encodings.Web.TextEncoderSettings(System.Text.Unicode.UnicodeRanges.All);
            });

            // npm start で実行されるポートがASP.NETのそれと別なので
            builder.Services.AddCors(options => {
                options.AddDefaultPolicy(builder => {
                    builder.AllowAnyOrigin()
                        .AllowAnyMethod()
                        .AllowAnyHeader();
                });
            });

            builder.Services.AddControllers(option => {
                // エラーハンドリング
                option.Filters.Add<Katchly.HttpResponseExceptionFilter>();

            }).AddJsonOptions(option => {
                // JSON日本語設定
                Util.ModifyJsonSrializerOptions(option.JsonSerializerOptions);
            });

            builder.Services.AddHostedService<BackgroundTaskLauncher>();
        }

        /// <summary>
        /// Webサーバー起動時初期設定
        /// </summary>
        internal static void InitWebApplication(this WebApplication app) {
            // 前述AddCorsの設定をするならこちらも必要
            app.UseCors();

        }

        /// <summary>
        /// バッチプロセス起動時初期設定
        /// </summary>
        internal static void InitAsBatchProces(this IServiceCollection services) {
            ConfigureServices(services);

        }

        internal static void ConfigureServices(IServiceCollection services) {

            // アプリケーションサービス
            services.AddScoped<AutoGeneratedApplicationService, OverridedApplicationService>();

            // DB接続
            services.AddScoped<Microsoft.EntityFrameworkCore.DbContext>(provider => {
                return provider.GetRequiredService<Katchly.MyDbContext>();
            });
            services.AddDbContext<Katchly.MyDbContext>((provider, option) => {
                var setting = provider.GetRequiredService<RuntimeSettings.Server>();
                var connStr = setting.GetActiveConnectionString();
                Microsoft.EntityFrameworkCore.ProxiesExtensions.UseLazyLoadingProxies(option);
                Microsoft.EntityFrameworkCore.SqliteDbContextOptionsBuilderExtensions.UseSqlite(option, connStr);
            });

            // 実行時設定ファイル
            services.AddScoped(_ => {
                var filename = "nijo-runtime-config.json";
                if (System.IO.File.Exists(filename)) {
                    using var stream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<RuntimeSettings.Server>(stream);
                    return parsed ?? RuntimeSettings.Server.GetDefault();
                } else {
                    var setting = RuntimeSettings.Server.GetDefault();
                    File.WriteAllText(filename, System.Text.Json.JsonSerializer.Serialize(setting, new System.Text.Json.JsonSerializerOptions {
                        WriteIndented = true,
                    }));
                    return setting;
                }
            });

            // ログ
            services.AddScoped<ILogger>(provider => {
                var setting = provider.GetRequiredService<RuntimeSettings.Server>();
                return new DefaultLogger(setting.LogDirectory);
            });

        }
    }

}
