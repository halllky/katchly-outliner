namespace FlexTree {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Infrastructure;
    using FlexTree;

    [ApiController]
    [Route("api/[controller]")]
    public partial class 親集約Controller : ControllerBase {
        public 親集約Controller(ILogger<親集約Controller> logger, AutoGeneratedApplicationService applicationService) {
            _logger = logger;
            _applicationService = applicationService;
        }
        protected readonly ILogger<親集約Controller> _logger;
        protected readonly AutoGeneratedApplicationService _applicationService;

        [HttpPost("create")]
        public virtual IActionResult Create([FromBody] 親集約CreateCommand param) {
            if (_applicationService.Create親集約(param, out var created, out var errors)) {
                return this.JsonContent(created);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpGet("detail/{ID}")]
        public virtual IActionResult Find(string? ID) {
            if (ID == null) return BadRequest();
            var instance = _applicationService.Find親集約(ID);
            if (instance == null) {
                return NotFound();
            } else {
                return this.JsonContent(instance);
            }
        }
        [HttpPost("update")]
        public virtual IActionResult Update(親集約SaveCommand param) {
            if (_applicationService.Update親集約(param, out var updated, out var errors)) {
                return this.JsonContent(updated);
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpDelete("delete")]
        public virtual IActionResult Delete(親集約SaveCommand param) {
            if (_applicationService.Delete親集約(param, out var errors)) {
                return Ok();
            } else {
                return BadRequest(this.JsonContent(errors));
            }
        }
        [HttpPost("load")]
        public virtual IActionResult Load([FromBody]親集約SearchCondition? filter, [FromQuery] int? skip, [FromQuery] int? take) {
            var instances = _applicationService.Load親集約(filter, skip, take);
            return this.JsonContent(instances.ToArray());
        }
        [HttpGet("list-by-keyword")]
        public virtual IActionResult SearchByKeywordxe09725e2e5673c42591875254a98e3c9([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeyword親集約(keyword);
            return this.JsonContent(items);
        }
        [HttpGet("list-by-keyword-xc1bac9f2faee01df79a5b7cd5bc563ea")]
        public virtual IActionResult SearchByKeywordxc1bac9f2faee01df79a5b7cd5bc563ea([FromQuery] string? keyword) {
            var items = _applicationService.SearchByKeywordChildren(keyword);
            return this.JsonContent(items);
        }
    }


    partial class AutoGeneratedApplicationService {
        public virtual bool Create親集約(親集約CreateCommand command, out 親集約DisplayData created, out ICollection<string> errors) {
            var dbEntity = command.ToDbEntity();
            DbContext.Add(dbEntity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                created = new 親集約DisplayData();
                errors = ex.GetMessagesRecursively("  ").ToList();
                return false;
            }
        
            var afterUpdate = this.Find親集約(dbEntity.ID);
            if (afterUpdate == null) {
                created = new 親集約DisplayData();
                errors = new[] { "更新後のデータの再読み込みに失敗しました。" };
                return false;
            }
        
            created = afterUpdate;
            errors = new List<string>();
        
            // // 親集約の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<親集約SaveCommand> {
            //     Created = new[] { afterUpdate },
            // };
        
            return true;
        }
        /// <summary>
        /// 親集約のキー情報から対象データの詳細を検索して返します。
        /// </summary>
        public virtual 親集約DisplayData? Find親集約(string? ID) {
        
            var entity = DbContext.親集約DbSet
                .AsNoTracking()
                .Include(x => x.Children)
                .Include(x => x.参照)
                .Include(x => x.Children)
                .ThenInclude(x => x.参照)
                .SingleOrDefault(x => x.ID == ID);
        
            if (entity == null) return null;
        
            var aggregateInstance = 親集約DisplayData.FromDbEntity(entity);
            return aggregateInstance;
        }
        public virtual bool Update親集約(親集約SaveCommand after, out 親集約DisplayData updated, out ICollection<string> errors) {
            errors = new List<string>();
        
            var beforeDbEntity = DbContext.親集約DbSet
                .AsNoTracking()
                .Include(x => x.Children)
                .Include(x => x.参照)
                .Include(x => x.Children)
                .ThenInclude(x => x.参照)
                .SingleOrDefault(x => x.ID == after.ID);
        
            if (beforeDbEntity == null) {
                updated = new 親集約DisplayData();
                errors.Add("更新対象のデータが見つかりません。");
                return false;
            }
        
            var beforeUpdate = 親集約SaveCommand.FromDbEntity(beforeDbEntity);
            var afterDbEntity = after.ToDbEntity();
        
            // Attach
            DbContext.Entry(afterDbEntity).State = EntityState.Modified;
        
            var arr0_before = beforeDbEntity
                .Children?
                .OfType<ChildrenDbEntity>()
                ?? Enumerable.Empty<ChildrenDbEntity>();
            var arr0_after = afterDbEntity
                .Children?
                .OfType<ChildrenDbEntity>()
                ?? Enumerable.Empty<ChildrenDbEntity>();
            foreach (var a in arr0_after) {
                var b = arr0_before.SingleOrDefault(b => b.KeyEquals(a));
                if (b == null) {
                    DbContext.Entry(a).State = EntityState.Added;
                } else {
                    DbContext.Entry(a).State = EntityState.Modified;
                }
            }
            foreach (var b in arr0_before) {
                var a = arr0_after.SingleOrDefault(a => a.KeyEquals(b));
                if (a == null) {
                    DbContext.Entry(b).State = EntityState.Deleted;
                }
            }
            
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                updated = new 親集約DisplayData();
                foreach (var msg in ex.GetMessagesRecursively()) errors.Add(msg);
                return false;
            }
        
            var afterUpdate = this.Find親集約(after.ID);
            if (afterUpdate == null) {
                updated = new 親集約DisplayData();
                errors.Add("更新後のデータの再読み込みに失敗しました。");
                return false;
            }
        
            // // 親集約の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<親集約SaveCommand> {
            //     Modified = new AggregateBeforeAfter<親集約SaveCommand>[] { new() { Before = beforeUpdate, After = afterUpdate } },
            // };
        
            updated = afterUpdate;
            return true;
        }
        public virtual bool Delete親集約(親集約SaveCommand data, out ICollection<string> errors) {
        
            var entity = DbContext.親集約DbSet
                .Include(x => x.Children)
                .Include(x => x.参照)
                .Include(x => x.Children)
                .ThenInclude(x => x.参照)
                .SingleOrDefault(x => x.ID == data.ID);
        
            if (entity == null) {
                errors = new[] { "削除対象のデータが見つかりません。" };
                return false;
            }
        
            var deleted = 親集約SaveCommand.FromDbEntity(entity);
        
            DbContext.Remove(entity);
        
            try {
                DbContext.SaveChanges();
            } catch (DbUpdateException ex) {
                errors = ex.GetMessagesRecursively().ToArray();
                return false;
            }
        
            // // 親集約の更新をトリガーとする処理を実行します。
            // var updateEvent = new AggregateUpdateEvent<親集約SaveCommand> {
            //     Deleted = new[] { deleted },
            // };
        
            errors = Array.Empty<string>();
            return true;
        }
        /// <summary>
        /// 親集約を検索して返します。
        /// </summary>
        public virtual IEnumerable<親集約DisplayData> Load親集約(親集約SearchCondition? filter, int? skip, int? take) {
        
            var query = (IQueryable<親集約DbEntity>)DbContext.親集約DbSet
                .AsNoTracking()
                .Include(x => x.Children)
                .Include(x => x.参照)
                .Include(x => x.Children)
                .ThenInclude(x => x.参照)
                ;
        
            // 絞り込み
            if (!string.IsNullOrWhiteSpace(filter?.ID)) {
                query = query.Where(x => x.ID == filter.ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.単語)) {
                var trimmed = filter.単語.Trim();
                query = query.Where(x => x.単語.Contains(trimmed));
            }
            if (!string.IsNullOrWhiteSpace(filter?.文章)) {
                var trimmed = filter.文章.Trim();
                query = query.Where(x => x.文章.Contains(trimmed));
            }
            if (filter?.整数?.From != default) {
                query = query.Where(x => x.整数 >= filter.整数.From);
            }
            if (filter?.整数?.To != default) {
                query = query.Where(x => x.整数 <= filter.整数.To);
            }
            if (filter?.実数?.From != default) {
                query = query.Where(x => x.実数 >= filter.実数.From);
            }
            if (filter?.実数?.To != default) {
                query = query.Where(x => x.実数 <= filter.実数.To);
            }
            if (filter?.日付時刻?.From != default) {
                query = query.Where(x => x.日付時刻 >= filter.日付時刻.From);
            }
            if (filter?.日付時刻?.To != default) {
                query = query.Where(x => x.日付時刻 <= filter.日付時刻.To);
            }
            if (filter?.日付?.From != default) {
                query = query.Where(x => x.日付 >= filter.日付.From);
            }
            if (filter?.日付?.To != default) {
                query = query.Where(x => x.日付 <= filter.日付.To);
            }
            if (filter?.年月?.From != default) {
                query = query.Where(x => x.年月 >= filter.年月.From);
            }
            if (filter?.年月?.To != default) {
                query = query.Where(x => x.年月 <= filter.年月.To);
            }
            if (filter?.年?.From != default) {
                query = query.Where(x => x.年 >= filter.年.From);
            }
            if (filter?.年?.To != default) {
                query = query.Where(x => x.年 <= filter.年.To);
            }
            if (!string.IsNullOrWhiteSpace(filter?.参照?.参照先ID)) {
                query = query.Where(x => x.参照.参照先ID == filter.参照.参照先ID);
            }
            if (!string.IsNullOrWhiteSpace(filter?.参照?.Name)) {
                var trimmed = filter.参照.Name.Trim();
                query = query.Where(x => x.参照.Name.Contains(trimmed));
            }
            if (filter?.真偽値 != default) {
                query = query.Where(x => x.真偽値 == filter.真偽値);
            }
            if (filter?.列挙体 != default) {
                query = query.Where(x => x.列挙体 == filter.列挙体);
            }
        
            // 順番
            query = query
                .OrderBy(x => x.ID)
                ;
        
            // ページング
            if (skip != null) query = query.Skip(skip.Value);
        
            const int DEFAULT_PAGE_SIZE = 20;
            var pageSize = take ?? DEFAULT_PAGE_SIZE;
            query = query.Take(pageSize);
        
            return query
                .AsEnumerable()
                .Select(entity => 親集約DisplayData.FromDbEntity(entity));
        }
        /// <summary>
        /// 親集約をキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<親集約RefInfo> SearchByKeyword親集約(string? keyword) {
            var query = (IQueryable<親集約DbEntity>)DbContext.親集約DbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.ID, like)
                                         || EF.Functions.Like(item.文章, like));
            }
        
            var results = query
                .OrderBy(m => m.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => 親集約RefInfo.FromDbEntity(entity));
        
            return results;
        }
        /// <summary>
        /// Childrenをキーワードで検索します。
        /// </summary>
        public virtual IEnumerable<ChildrenRefInfo> SearchByKeywordChildren(string? keyword) {
            var query = (IQueryable<ChildrenDbEntity>)DbContext.ChildrenDbSet;
        
            if (!string.IsNullOrWhiteSpace(keyword)) {
                var like = $"%{keyword.Trim().Replace("%", "\\%")}%";
                query = query.Where(item => EF.Functions.Like(item.Parent.ID, like)
                                         || EF.Functions.Like(item.ID, like)
                                         || EF.Functions.Like(item.文章, like));
            }
        
            var results = query
                .OrderBy(m => m.Parent.ID)
                .Take(101)
                .AsEnumerable()
                .Select(entity => ChildrenRefInfo.FromDbEntity(entity));
        
            return results;
        }
    }


#region データ構造クラス
    /// <summary>
    /// 親集約のデータ作成コマンドです。
    /// </summary>
    public partial class 親集約CreateCommand {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public 参照先Keys? 参照 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
        public List<ChildrenSaveCommand>? Children { get; set; }
    
        /// <summary>
        /// 親集約のオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public FlexTree.親集約DbEntity ToDbEntity() {
            return new FlexTree.親集約DbEntity {
                ID = this.ID,
                単語 = this.単語,
                文章 = this.文章,
                整数 = this.整数,
                実数 = this.実数,
                日付時刻 = this.日付時刻,
                日付 = this.日付,
                年月 = this.年月,
                年 = this.年,
                真偽値 = this.真偽値,
                列挙体 = this.列挙体,
                Children = this.Children?.Select(item1 => new FlexTree.ChildrenDbEntity {
                    Children_ID = this.ID,
                    ID = item1.ID,
                    単語 = item1.単語,
                    文章 = item1.文章,
                    整数 = item1.整数,
                    実数 = item1.実数,
                    日付時刻 = item1.日付時刻,
                    日付 = item1.日付,
                    年月 = item1.年月,
                    年 = item1.年,
                    真偽値 = item1.真偽値,
                    列挙体 = item1.列挙体,
                    参照_参照先ID = item1.参照?.参照先ID,
                }).ToHashSet() ?? new HashSet<FlexTree.ChildrenDbEntity>(),
                参照_参照先ID = this.参照?.参照先ID,
            };
        }
    }
    /// <summary>
    /// 親集約のデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class 親集約SaveCommand {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public 参照先Keys? 参照 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
        public List<ChildrenSaveCommand>? Children { get; set; }
    
        /// <summary>
        /// 親集約のオブジェクトをデータベースに保存する形に変換します。
        /// </summary>
        public FlexTree.親集約DbEntity ToDbEntity() {
            return new FlexTree.親集約DbEntity {
                ID = this.ID,
                単語 = this.単語,
                文章 = this.文章,
                整数 = this.整数,
                実数 = this.実数,
                日付時刻 = this.日付時刻,
                日付 = this.日付,
                年月 = this.年月,
                年 = this.年,
                真偽値 = this.真偽値,
                列挙体 = this.列挙体,
                Children = this.Children?.Select(item1 => new FlexTree.ChildrenDbEntity {
                    Children_ID = this.ID,
                    ID = item1.ID,
                    単語 = item1.単語,
                    文章 = item1.文章,
                    整数 = item1.整数,
                    実数 = item1.実数,
                    日付時刻 = item1.日付時刻,
                    日付 = item1.日付,
                    年月 = item1.年月,
                    年 = item1.年,
                    真偽値 = item1.真偽値,
                    列挙体 = item1.列挙体,
                    参照_参照先ID = item1.参照?.参照先ID,
                }).ToHashSet() ?? new HashSet<FlexTree.ChildrenDbEntity>(),
                参照_参照先ID = this.参照?.参照先ID,
            };
        }
        /// <summary>
        /// 親集約のデータベースから取得した内容を画面に表示する形に変換します。
        /// </summary>
        public static 親集約SaveCommand FromDbEntity(FlexTree.親集約DbEntity entity) {
            var instance = new 親集約SaveCommand {
                ID = entity.ID,
                単語 = entity.単語,
                文章 = entity.文章,
                整数 = entity.整数,
                実数 = entity.実数,
                日付時刻 = entity.日付時刻,
                日付 = entity.日付,
                年月 = entity.年月,
                年 = entity.年,
                参照 = new 参照先Keys() {
                    参照先ID = entity.参照?.参照先ID,
                },
                真偽値 = entity.真偽値,
                列挙体 = entity.列挙体,
                Children = entity.Children?.Select(item => new ChildrenSaveCommand() {
                    ID = item.ID,
                    単語 = item.単語,
                    文章 = item.文章,
                    整数 = item.整数,
                    実数 = item.実数,
                    日付時刻 = item.日付時刻,
                    日付 = item.日付,
                    年月 = item.年月,
                    年 = item.年,
                    参照 = new 参照先Keys() {
                        参照先ID = item.参照?.参照先ID,
                    },
                    真偽値 = item.真偽値,
                    列挙体 = item.列挙体,
                }).ToList(),
            };
            return instance;
        }
    }
    /// <summary>
    /// Childrenのデータ1件の詳細を表すクラスです。
    /// </summary>
    public partial class ChildrenSaveCommand {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public 参照先Keys? 参照 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
    
    }
    public class 親集約SearchCondition {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public FromTo<int?> 整数 { get; set; } = new();
        public FromTo<decimal?> 実数 { get; set; } = new();
        public FromTo<DateTime?> 日付時刻 { get; set; } = new();
        public FromTo<DateTime?> 日付 { get; set; } = new();
        public FromTo<int?> 年月 { get; set; } = new();
        public FromTo<int?> 年 { get; set; } = new();
        public 親集約_参照SearchCondition 参照 { get; set; } = new();
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
    }
    public class ChildrenSearchCondition {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public FromTo<int?> 整数 { get; set; } = new();
        public FromTo<decimal?> 実数 { get; set; } = new();
        public FromTo<DateTime?> 日付時刻 { get; set; } = new();
        public FromTo<DateTime?> 日付 { get; set; } = new();
        public FromTo<int?> 年月 { get; set; } = new();
        public FromTo<int?> 年 { get; set; } = new();
        public Children_参照SearchCondition 参照 { get; set; } = new();
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
    }
    public class 親集約_参照SearchCondition {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    }
    public class Children_参照SearchCondition {
        public string? 参照先ID { get; set; }
        public string? Name { get; set; }
    }
    public class 親集約Keys {
        [Key]
        public string? ID { get; set; }
    }
    public class ChildrenKeys {
        [Key]
        public 親集約Keys? Parent { get; set; }
        [Key]
        public string? ID { get; set; }
    }
    /// <summary>
    /// 親集約のデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class 親集約DbEntity {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
        public string? 参照_参照先ID { get; set; }
    
        public virtual 参照先DbEntity? 参照 { get; set; }
        public virtual ICollection<ChildrenDbEntity> Children { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(親集約DbEntity entity) {
            if (entity.ID != this.ID) return false;
            return true;
        }
    }
    /// <summary>
    /// Childrenのデータベースに保存されるデータの形を表すクラスです。
    /// </summary>
    public partial class ChildrenDbEntity {
        public string? Children_ID { get; set; }
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
        public string? 参照_参照先ID { get; set; }
    
        public virtual 親集約DbEntity? Parent { get; set; }
        public virtual 参照先DbEntity? 参照 { get; set; }
    
        /// <summary>このオブジェクトと比較対象のオブジェクトの主キーが一致するかを返します。</summary>
        public bool KeyEquals(ChildrenDbEntity entity) {
            if (entity.Children_ID != this.Children_ID) return false;
            if (entity.ID != this.ID) return false;
            return true;
        }
    }
    /// <summary>
    /// 親集約の画面表示用データ
    /// </summary>
    public partial class 親集約DisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public 親集約DisplayDataOwnMembers own_members { get; set; } = new();
        public List<ChildrenDisplayData> child_Children { get; set; }
    
        public static 親集約DisplayData FromDbEntity(親集約DbEntity dbEntity) {
            var displayData = new 親集約DisplayData {
                localRepositoryItemKey = new object?[] { dbEntity.ID }.ToJson(),
                existsInRemoteRepository = true,
                willBeChanged = false,
                willBeDeleted = false,
                own_members = new() {
                    ID = dbEntity?.ID,
                    単語 = dbEntity?.単語,
                    文章 = dbEntity?.文章,
                    整数 = dbEntity?.整数,
                    実数 = dbEntity?.実数,
                    日付時刻 = dbEntity?.日付時刻,
                    日付 = dbEntity?.日付,
                    年月 = dbEntity?.年月,
                    年 = dbEntity?.年,
                    参照 = new 参照先RefInfo {
                        __instanceKey = new object?[] {
                            dbEntity?.参照?.参照先ID,
                        }.ToJson(),
                        参照先ID = dbEntity?.参照?.参照先ID,
                        Name = dbEntity?.参照?.Name,
                    },
                    真偽値 = dbEntity?.真偽値,
                    列挙体 = dbEntity?.列挙体,
                },
                child_Children = dbEntity?.Children?.Select(x0 => new ChildrenDisplayData {
                    localRepositoryItemKey = new object?[] { dbEntity.ID, x0?.ID }.ToJson(),
                    existsInRemoteRepository = true,
                    willBeChanged = false,
                    willBeDeleted = false,
                    own_members = new() {
                        ID = x0?.ID,
                        単語 = x0?.単語,
                        文章 = x0?.文章,
                        整数 = x0?.整数,
                        実数 = x0?.実数,
                        日付時刻 = x0?.日付時刻,
                        日付 = x0?.日付,
                        年月 = x0?.年月,
                        年 = x0?.年,
                        参照 = new 参照先RefInfo {
                            __instanceKey = new object?[] {
                                x0?.参照?.参照先ID,
                            }.ToJson(),
                            参照先ID = x0?.参照?.参照先ID,
                            Name = x0?.参照?.Name,
                        },
                        真偽値 = x0?.真偽値,
                        列挙体 = x0?.列挙体,
                    },
                }).ToList() ?? [],
            };
            return displayData;
        }
    }
    public class 親集約DisplayDataOwnMembers {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public 参照先RefInfo? 参照 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
    }
    /// <summary>
    /// Childrenの画面表示用データ
    /// </summary>
    public partial class ChildrenDisplayData {
        public string localRepositoryItemKey { get; set; }
        public bool existsInRemoteRepository { get; set; }
        public bool willBeChanged { get; set; }
        public bool willBeDeleted { get; set; }
        public ChildrenDisplayDataOwnMembers own_members { get; set; } = new();
    }
    public class ChildrenDisplayDataOwnMembers {
        public string? ID { get; set; }
        public string? 単語 { get; set; }
        public string? 文章 { get; set; }
        public int? 整数 { get; set; }
        public decimal? 実数 { get; set; }
        public DateTime? 日付時刻 { get; set; }
        public DateTime? 日付 { get; set; }
        public int? 年月 { get; set; }
        public int? 年 { get; set; }
        public 参照先RefInfo? 参照 { get; set; }
        public bool? 真偽値 { get; set; }
        public MyEnum? 列挙体 { get; set; }
    }
    
    // ----------------------- 親集約RefInfo -----------------------
    /// <summary>
    /// 親集約を参照する他のデータの画面上に表示される親集約のデータ型。
    /// </summary>
    public partial class 親集約RefInfo {
        /// <summary>
        /// 親集約のキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間の親集約をUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public string? ID { get; set; }
        public string? 文章 { get; set; }
    
        public static 親集約RefInfo FromDbEntity(親集約DbEntity dbEntity) {
            var instance = new 親集約RefInfo {
                __instanceKey = new object?[] {
                    dbEntity.ID,
                }.ToJson(),
                ID = dbEntity.ID,
                文章 = dbEntity.文章,
            };
            return instance;
        }
    }
    
    // ----------------------- ChildrenRefInfo -----------------------
    /// <summary>
    /// Childrenを参照する他のデータの画面上に表示されるChildrenのデータ型。
    /// </summary>
    public partial class ChildrenRefInfo {
        /// <summary>
        /// Childrenのキー。保存するときはこの値が使用される。
        /// 新規作成されてからDBに登録されるまでの間のChildrenをUUID等の不変の値で参照できるようにするために文字列になっている。
        /// </summary>
        public string? __instanceKey { get; set; }
    
        public ChildrenRefInfo_Parent? Parent { get; set; }
        public string? ID { get; set; }
        public string? 文章 { get; set; }
    
        public static ChildrenRefInfo FromDbEntity(ChildrenDbEntity dbEntity) {
            var instance = new ChildrenRefInfo {
                __instanceKey = new object?[] {
                    dbEntity.Children_ID,
                    dbEntity.ID,
                }.ToJson(),
                ID = dbEntity.ID,
                文章 = dbEntity.文章,
            };
            return instance;
        }
    }
    public partial class ChildrenRefInfo_Parent {
        public string? ID { get; set; }
        public string? 文章 { get; set; }
    }
#endregion データ構造クラス
}

namespace FlexTree {
    using FlexTree;
    using Microsoft.EntityFrameworkCore;

    partial class MyDbContext {
        public virtual DbSet<親集約DbEntity> 親集約DbSet { get; set; }
        public virtual DbSet<ChildrenDbEntity> ChildrenDbSet { get; set; }

        private void OnModelCreating_親集約(ModelBuilder modelBuilder) {
            modelBuilder.Entity<FlexTree.親集約DbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.ID,
                });
            
                entity.Property(e => e.ID)
                    .IsRequired(true);
                entity.Property(e => e.単語)
                    .IsRequired(false);
                entity.Property(e => e.文章)
                    .IsRequired(false);
                entity.Property(e => e.整数)
                    .IsRequired(false);
                entity.Property(e => e.実数)
                    .IsRequired(false);
                entity.Property(e => e.日付時刻)
                    .IsRequired(false);
                entity.Property(e => e.日付)
                    .IsRequired(false);
                entity.Property(e => e.年月)
                    .IsRequired(false);
                entity.Property(e => e.年)
                    .IsRequired(false);
                entity.Property(e => e.真偽値)
                    .IsRequired(false);
                entity.Property(e => e.列挙体)
                    .IsRequired(false);
                entity.Property(e => e.参照_参照先ID)
                    .IsRequired(false);
            
                entity.HasMany(e => e.Children)
                    .WithOne(e => e.Parent)
                    .HasForeignKey(e => new {
                        e.Children_ID,
                    })
                    .OnDelete(DeleteBehavior.Cascade);
            });
            modelBuilder.Entity<FlexTree.ChildrenDbEntity>(entity => {
            
                entity.HasKey(e => new {
                    e.Children_ID,
                    e.ID,
                });
            
                entity.Property(e => e.Children_ID)
                    .IsRequired(true);
                entity.Property(e => e.ID)
                    .IsRequired(true);
                entity.Property(e => e.単語)
                    .IsRequired(false);
                entity.Property(e => e.文章)
                    .IsRequired(false);
                entity.Property(e => e.整数)
                    .IsRequired(false);
                entity.Property(e => e.実数)
                    .IsRequired(false);
                entity.Property(e => e.日付時刻)
                    .IsRequired(false);
                entity.Property(e => e.日付)
                    .IsRequired(false);
                entity.Property(e => e.年月)
                    .IsRequired(false);
                entity.Property(e => e.年)
                    .IsRequired(false);
                entity.Property(e => e.真偽値)
                    .IsRequired(false);
                entity.Property(e => e.列挙体)
                    .IsRequired(false);
                entity.Property(e => e.参照_参照先ID)
                    .IsRequired(false);
            
                
            });
        }
    }
}
