using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;

namespace Katchly {
    /// <summary>
    /// 自動生成された検索機能や登録機能を上書きする場合はこのクラス内でそのメソッドやプロパティをoverrideしてください。
    /// </summary>
    public partial class OverridedApplicationService : AutoGeneratedApplicationService {
        public OverridedApplicationService(IServiceProvider serviceProvider) : base(serviceProvider) { }

        #region ROW
        protected override void OnRowCreating(IBeforeCreateEventArgs<RowCreateCommand> arg) {
            var now = DateTime.Now;
            arg.Data.CreatedOn = now;
            arg.Data.UpdatedOn = now;
            foreach (var attr in arg.Data.Attrs ?? []) {
                attr.UpdatedOn = now;
            }

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "Row",
                RowIdOrRowTypeId = arg.Data.ID,
                UpdateType = "INS",
                LogTime = now,
                Content = arg.Data.ToJson(),
            });
        }
        protected override void OnRowUpdating(IBeforeUpdateEventArgs<RowSaveCommand> arg) {
            var now = DateTime.Now;
            arg.After.CreateUser = arg.Before.CreateUser;
            arg.After.CreatedOn = arg.Before.CreatedOn;
            arg.After.UpdatedOn = now;
            foreach (var after in arg.After.Attrs ?? []) {
                var before = arg.Before.Attrs?.SingleOrDefault(b => b.ColType?.ColumnId == after.ColType?.ColumnId);
                if (before == null || after.Value != before.Value) {
                    after.UpdatedOn = now;
                }
            }

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "Row",
                RowIdOrRowTypeId = arg.After.ID,
                UpdateType = "UPD",
                LogTime = now,
                Content = arg.After.ToJson(),
            });
        }
        protected override void OnRowDeleting(IBeforeDeleteEventArgs<RowSaveCommand> arg) {
            var now = DateTime.Now;

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "Row",
                RowIdOrRowTypeId = arg.Data.ID,
                UpdateType = "DEL",
                LogTime = now,
                Content = arg.Data.ToJson(),
            });
        }
        #endregion ROW

        #region ROW TYPE
        protected override void OnRowTypeCreating(IBeforeCreateEventArgs<RowTypeCreateCommand> arg) {
            var now = DateTime.Now;
            arg.Data.CreatedOn = now;
            arg.Data.UpdatedOn = now;

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "RowType",
                RowIdOrRowTypeId = arg.Data.ID,
                UpdateType = "INS",
                LogTime = now,
                Content = arg.Data.ToJson(),
            });
        }
        protected override void OnRowTypeUpdating(IBeforeUpdateEventArgs<RowTypeSaveCommand> arg) {
            var now = DateTime.Now;
            arg.After.CreateUser = arg.Before.CreateUser;
            arg.After.CreatedOn = arg.Before.CreatedOn;
            arg.After.UpdatedOn = now;

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "RowType",
                RowIdOrRowTypeId = arg.After.ID,
                UpdateType = "UPD",
                LogTime = now,
                Content = arg.After.ToJson(),
            });
        }
        protected override void OnRowTypeDeleting(IBeforeDeleteEventArgs<RowTypeSaveCommand> arg) {
            var now = DateTime.Now;

            DbContext.LogDbSet.Add(new LogDbEntity {
                ID = Guid.NewGuid().ToString(),
                UpdatedObject = "RowType",
                RowIdOrRowTypeId = arg.Data.ID,
                UpdateType = "DEL",
                LogTime = now,
                Content = arg.Data.ToJson(),
            });
        }
        #endregion ROW TYPE
    }


    #region 行の並び順の洗い替え（ちゃんとした仕組みができるまでの暫定措置）
    public class DeleteInsertAllParam {
        public string? RowObjectIdList { get; set; }
    }
    partial class RowOrderController {
        [HttpPost("delete-all-row-order")]
        public IActionResult DeleteAllRowOrder() {
            // 全件DELETE
            _applicationService.DbContext.RowOrderDbSet.ExecuteDelete();
            return Ok();
        }
        [HttpPost("insert-all-row-order")]
        public IActionResult InsertAllRowOrder([FromBody] DeleteInsertAllParam param) {
            // パラメータ解釈
            var rowIds = param.RowObjectIdList?.Replace("\r\n", "\n").Split("\n");
            if (rowIds == null) {
                return BadRequest($"{nameof(DeleteInsertAllParam.RowObjectIdList)} に値が指定されていません。");
            }

            // INSERT文組み立て
            var sql = new StringBuilder();
            var parameters = new List<SqliteParameter>();
            sql.AppendLine($"INSERT INTO {nameof(MyDbContext.RowOrderDbSet)}");
            sql.AppendLine($"  ({nameof(RowOrderDbEntity.Row_ID)}, \"{nameof(RowOrderDbEntity.Order)}\")");
            sql.AppendLine($"VALUES");
            for (int i = 0; i < rowIds.Length; i++) {
                var paramName = $"@{i}";
                var value = rowIds[i];
                if (string.IsNullOrWhiteSpace(value)) continue;

                sql.AppendLine(i < rowIds.Length - 1
                    ? $"  ({paramName}, {i}),"
                    : $"  ({paramName}, {i});");
                parameters.Add(new SqliteParameter(paramName, SqliteType.Text) { Value = value });
            }

            // 行データが0件の場合など
            if (parameters.Count == 0) return Ok();

            // まとめてINSERT
            _applicationService.DbContext.Database.ExecuteSqlRaw(sql.ToString(), parameters);
            return Ok();
        }
    }
    #endregion 行の並び順の洗い替え（ちゃんとした仕組みができるまでの暫定措置）
}
