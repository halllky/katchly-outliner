/**
 * このファイルはソース自動生成によって上書きされます。
 */
import { useCallback, useMemo } from 'react'
import { useMsgContext, useToastContext } from './Notification'
import { useHttpRequest } from './Http'
import { ItemKey, LocalRepositoryContextValue, LocalRepositoryStoredItem, SaveLocalItemHandler, getLocalRepositoryState } from './LocalRepository'
import * as AggregateType from '../autogenerated-types'

export const useLocalRepositoryCommitHandling = () => {
  const [, dispatchMsg] = useMsgContext()
  const [, dispatchToast] = useToastContext()
  const { post, httpDelete } = useHttpRequest()

  const saveHandlerMap = useMemo(() => new Map<string, SaveLocalItemHandler<any>>([
    ['RowType', async (localReposItem: LocalRepositoryStoredItem<AggregateType.RowTypeDisplayData>) => {
      const [{ item: saveItem }] = AggregateType.convertRowTypeToLocalRepositoryItem(localReposItem.item)
      const state = getLocalRepositoryState(localReposItem)
      if (state === '+') {
        const url = `/api/RowType/create`
        const response = await post<AggregateType.RowTypeDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '*') {
        const url = `/api/RowType/update`
        const response = await post<AggregateType.RowTypeDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '-') {
        const url = `/api/RowType/delete`
        const response = await httpDelete(url, saveItem)
        return { commit: response.ok }
    
      } else {
        dispatchMsg(msg => msg.error(`'${saveItem}' の状態 '${state}' が不正です。`))
        return { commit: false }
      }
    }],
    ['Row', async (localReposItem: LocalRepositoryStoredItem<AggregateType.RowDisplayData>) => {
      const [{ item: saveItem }] = AggregateType.convertRowToLocalRepositoryItem(localReposItem.item)
      const state = getLocalRepositoryState(localReposItem)
      if (state === '+') {
        const url = `/api/Row/create`
        const response = await post<AggregateType.RowDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '*') {
        const url = `/api/Row/update`
        const response = await post<AggregateType.RowDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '-') {
        const url = `/api/Row/delete`
        const response = await httpDelete(url, saveItem)
        return { commit: response.ok }
    
      } else {
        dispatchMsg(msg => msg.error(`'${saveItem}' の状態 '${state}' が不正です。`))
        return { commit: false }
      }
    }],
    ['RowOrder', async (localReposItem: LocalRepositoryStoredItem<AggregateType.RowOrderDisplayData>) => {
      const [{ item: saveItem }] = AggregateType.convertRowOrderToLocalRepositoryItem(localReposItem.item)
      const state = getLocalRepositoryState(localReposItem)
      if (state === '+') {
        const url = `/api/RowOrder/create`
        const response = await post<AggregateType.RowOrderDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '*') {
        const url = `/api/RowOrder/update`
        const response = await post<AggregateType.RowOrderDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '-') {
        const url = `/api/RowOrder/delete`
        const response = await httpDelete(url, saveItem)
        return { commit: response.ok }
    
      } else {
        dispatchMsg(msg => msg.error(`'${saveItem}' の状態 '${state}' が不正です。`))
        return { commit: false }
      }
    }],
    ['Log', async (localReposItem: LocalRepositoryStoredItem<AggregateType.LogDisplayData>) => {
      const [{ item: saveItem }] = AggregateType.convertLogToLocalRepositoryItem(localReposItem.item)
      const state = getLocalRepositoryState(localReposItem)
      if (state === '+') {
        const url = `/api/Log/create`
        const response = await post<AggregateType.LogDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '*') {
        const url = `/api/Log/update`
        const response = await post<AggregateType.LogDisplayData>(url, saveItem)
        return { commit: response.ok }
    
      } else if (state === '-') {
        const url = `/api/Log/delete`
        const response = await httpDelete(url, saveItem)
        return { commit: response.ok }
    
      } else {
        dispatchMsg(msg => msg.error(`'${saveItem}' の状態 '${state}' が不正です。`))
        return { commit: false }
      }
    }],
  ]), [post, httpDelete, dispatchMsg, dispatchToast])

  return useCallback(async (
    commit: LocalRepositoryContextValue['commit'],
    ...keys: { dataTypeKey: string, itemKey: ItemKey }[]
  ) => {
    const success = await commit(async localReposItem => {
      const handler = saveHandlerMap.get(localReposItem.dataTypeKey)
      if (!handler) {
        dispatchMsg(msg => msg.error(`データ型 '${localReposItem.dataTypeKey}' の保存処理が定義されていません。`))
        return { commit: false }
      }
      return await handler(localReposItem)
    }, ...keys)

    dispatchToast(msg => success
      ? msg.info('保存しました。')
      : msg.info('一部のデータの保存に失敗しました。'))

  }, [saveHandlerMap, dispatchMsg, dispatchToast])
}
