import { useCallback } from 'react'
import * as Types from '../autogenerated-types'
import { useHttpRequest } from './Http'
import { useMsgContext } from './Notification'
import { LocalRepositoryState } from './LocalRepository'

export type BatchUpdateItem
  = { DataType: 'RowType', Action: 'ADD' | 'MOD' | 'DEL', Data: Types.RowTypeSaveCommand }
  | { DataType: 'Row', Action: 'ADD' | 'MOD' | 'DEL', Data: Types.RowSaveCommand }
  | { DataType: 'RowOrder', Action: 'ADD' | 'MOD' | 'DEL', Data: Types.RowOrderSaveCommand }
  | { DataType: 'Comment', Action: 'ADD' | 'MOD' | 'DEL', Data: Types.CommentSaveCommand }
  | { DataType: 'Log', Action: 'ADD' | 'MOD' | 'DEL', Data: Types.LogSaveCommand }

export default () => {
  const [, dispatchMsg] = useMsgContext()
  const { post } = useHttpRequest()

  const scheduleBatchUpdate = useCallback(async (Items: BatchUpdateItem[]) => {
    const res = await post(`/api/NIJOBackgroundTaskEntity/schedule/NIJO-BATCH-UPDATE`, { Items })
    if (!res.ok) {
      dispatchMsg(msg => msg.error('一括更新に失敗しました。'))
    }
  }, [post, dispatchMsg])

  const batchUpdateImmediately = useCallback(async (Items: BatchUpdateItem[]) => {
    const res = await post(`/api/BatchUpdate`, { Items })
    if (!res.ok) {
      dispatchMsg(msg => msg.error('一括更新に失敗しました。'))
    }
  }, [post, dispatchMsg])

  return { scheduleBatchUpdate, batchUpdateImmediately }
}
