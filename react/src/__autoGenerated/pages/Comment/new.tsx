import React, { useState, useEffect, useCallback, useMemo, useReducer, useRef, useId, useContext, createContext } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { SubmitHandler, useForm, FormProvider, useFormContext, useFieldArray } from 'react-hook-form';
import { BookmarkSquareIcon, PencilIcon, XMarkIcon, PlusIcon, ArrowUturnLeftIcon } from '@heroicons/react/24/outline';
import { UUID } from 'uuidjs';
import dayjs from 'dayjs';
import * as Input from '../../input';
import * as Layout from '../../collection';
import * as Util from '../../util';
import * as AggregateType from '../../autogenerated-types'

const VForm = Layout.VerticalForm

export default function () {
  return (
    <Util.MsgContextProvider>
      <Page />
    </Util.MsgContextProvider>
  )
}

const Page = () => {
  const { key0: keyOfNewItem } = useParams()
  const { load, commit } = Util.useCommentRepository(keyOfNewItem as Util.ItemKey | undefined)

  const [defaultValues, setDefaultValues] = useState<AggregateType.CommentDisplayData | undefined>()
  useEffect(() => {
    load().then(items => {
      setDefaultValues(items?.[0])
    })
  }, [load])

  const handleCommit: ReturnType<typeof Util.useCommentRepository>['commit'] = useCallback(async (...items) => {
    await commit(...items)
    const afterCommit = await load()
    setDefaultValues(afterCommit?.[0])
  }, [load, commit])

  return defaultValues ? (
    <AfterLoaded
      defaultValues={defaultValues}
      commit={handleCommit}
    ></AfterLoaded>
  ) : (
    <>
      <Util.InlineMessageList />
    </>
  )
}

const AfterLoaded = ({
  defaultValues,
  commit,
}: {
  defaultValues: AggregateType.CommentDisplayData
  commit: ReturnType<typeof Util.useCommentRepository>['commit']
}) => {

  const navigate = useNavigate()
  const reactHookFormMethods = useForm({ defaultValues })
  const { handleSubmit } = reactHookFormMethods


  const formRef = useRef<HTMLFormElement>(null)
  const onKeyDown: React.KeyboardEventHandler<HTMLFormElement> = useCallback(e => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      // Ctrl + Enter で送信
      formRef.current?.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))

    } else if (e.key === 'Enter' && !(e.target as HTMLElement).matches('textarea')) {
      // フォーム中でEnterキーが押されたときに誤submitされるのを防ぐ。
      // textareaでpreventDefaultすると改行できなくなるので除外
      e.preventDefault()
    }
  }, [])

  // データの一時保存
  const onSave: SubmitHandler<AggregateType.CommentDisplayData> = useCallback(async data => {
    await commit({ ...data, willBeChanged: true })
  }, [commit])

  return (
    <FormProvider {...reactHookFormMethods}>
      <form className="page-content-root gap-2" ref={formRef} onSubmit={handleSubmit(onSave)} onKeyDown={onKeyDown}>
        <h1 className="flex text-base font-semibold select-none py-1">
          <Link to="/x6940e80bcd51a8fd2f00f79328cf4efc">Comment</Link>
          &nbsp;&#047;&nbsp;
          新規作成
          <div className="flex-1"></div>
        </h1>

        <Util.InlineMessageList />

        <CommentView />

        <Input.IconButton submit fill className="self-start" icon={BookmarkSquareIcon}>一時保存</Input.IconButton>
      </form>
    </FormProvider>
  )
}

const CommentView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues } = Util.useFormContextEx<AggregateType.CommentDisplayData>()
  const item = getValues()

  return (
    <>
      <VForm.Container leftColumnMinWidth="11.6rem">
        <input type="hidden" {...register(`own_members.ID`)} />
        <VForm.Item label="Text">
          <Input.Description {...registerEx(`own_members.Text`)} />
        </VForm.Item>
        <VForm.Item label="Author">
          <Input.Word {...registerEx(`own_members.Author`)} />
        </VForm.Item>
        <VForm.Item label="Indent">
          <Input.Num {...registerEx(`own_members.Indent`)} />
        </VForm.Item>
        <VForm.Item label="Order">
          <Input.Num {...registerEx(`own_members.Order`)} />
        </VForm.Item>
        <VForm.Item label="CreatedOn">
          <Input.Date {...registerEx(`own_members.CreatedOn`)} />
        </VForm.Item>
        <VForm.Item label="UpdatedOn">
          <Input.Date {...registerEx(`own_members.UpdatedOn`)} />
        </VForm.Item>
        <VForm.Container
          labelSide={<>
            Target
            <Input.Selection
              {...registerEx(`own_members.Target`)}
              options={['CommentTargetRow' as const, 'CommentTargetCell' as const, 'CommentTargetRowType' as const, 'CommentTargetColumn' as const]}
              textSelector={item => item}
            />
          </>}
        >
          <CommentTargetRowView />
          <CommentTargetCellView />
          <CommentTargetRowTypeView />
          <CommentTargetColumnView />
        </VForm.Container>
      </VForm.Container>
    </>
  )
}
const CommentTargetRowView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.CommentDisplayData>()
  const item = getValues(`child_CommentTargetRow`)

  const body = (
    <>
      <input type="hidden" {...register(`child_CommentTargetRow.own_members.Row`)} />
    </>
  )

  return watch(`own_members.Target`) === 'CommentTargetRow'
    ? (
      <>
        {body}
      </>
    ) : (
      <div className="hidden">
        {body}
      </div>
    )
}
const CommentTargetCellView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.CommentDisplayData>()
  const item = getValues(`child_CommentTargetCell`)

  const body = (
    <>
      <input type="hidden" {...register(`child_CommentTargetCell.own_members.Cell`)} />
    </>
  )

  return watch(`own_members.Target`) === 'CommentTargetCell'
    ? (
      <>
        {body}
      </>
    ) : (
      <div className="hidden">
        {body}
      </div>
    )
}
const CommentTargetRowTypeView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.CommentDisplayData>()
  const item = getValues(`child_CommentTargetRowType`)

  const body = (
    <>
      <input type="hidden" {...register(`child_CommentTargetRowType.own_members.RowType`)} />
    </>
  )

  return watch(`own_members.Target`) === 'CommentTargetRowType'
    ? (
      <>
        {body}
      </>
    ) : (
      <div className="hidden">
        {body}
      </div>
    )
}
const CommentTargetColumnView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.CommentDisplayData>()
  const item = getValues(`child_CommentTargetColumn`)

  const body = (
    <>
      <input type="hidden" {...register(`child_CommentTargetColumn.own_members.Column`)} />
    </>
  )

  return watch(`own_members.Target`) === 'CommentTargetColumn'
    ? (
      <>
        {body}
      </>
    ) : (
      <div className="hidden">
        {body}
      </div>
    )
}
