import React, { useState, useEffect, useCallback, useMemo, useReducer, useRef, useId, useContext, createContext } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { SubmitHandler, useForm, FormProvider, useFormContext, useFieldArray } from 'react-hook-form';
import { BookmarkSquareIcon, PencilIcon, XMarkIcon, PlusIcon, ArrowUturnLeftIcon } from '@heroicons/react/24/outline';
import { UUID } from 'uuidjs';
import dayjs from 'dayjs';
import * as Input from '../../input';
import * as Layout from '../../collection';
import * as Util from '../../util';
import * as AggregateType from '../../autogenerated-types'

const VForm = Layout.VerticalForm

export default function () {
  return (
    <Util.MsgContextProvider>
      <Page />
    </Util.MsgContextProvider>
  )
}

const Page = () => {
  const { key0 } = useParams()
  const pkArray: [string | undefined] = useMemo(() => {
    const urlKeyID = key0
    return [urlKeyID]
  }, [key0])

  const { load } = Util.useLogRepository(pkArray)

  const [defaultValues, setDefaultValues] = useState<AggregateType.LogDisplayData | undefined>()
  useEffect(() => {
    load().then(items => {
      setDefaultValues(items?.[0])
    })
  }, [load])

  return defaultValues ? (
    <AfterLoaded
      pkArray={pkArray}
      defaultValues={defaultValues}
    ></AfterLoaded>
  ) : (
    <>
      <Util.InlineMessageList />
    </>
  )
}

const AfterLoaded = ({
  pkArray,
  defaultValues,
}: {
  pkArray: [string | undefined]
  defaultValues: AggregateType.LogDisplayData
}) => {

  const navigate = useNavigate()
  const reactHookFormMethods = useForm({ defaultValues })
  const { handleSubmit } = reactHookFormMethods

  const instanceName = useMemo(() => {
    return `${defaultValues.own_members?.Content ?? ''}`
  }, [defaultValues.own_members])

  const formRef = useRef<HTMLFormElement>(null)
  const onKeyDown: React.KeyboardEventHandler<HTMLFormElement> = useCallback(e => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      // Ctrl + Enter で送信
      formRef.current?.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))

    } else if (e.key === 'Enter' && !(e.target as HTMLElement).matches('textarea')) {
      // フォーム中でEnterキーが押されたときに誤submitされるのを防ぐ。
      // textareaでpreventDefaultすると改行できなくなるので除外
      e.preventDefault()
    }
  }, [])

  const navigateToEditView = useCallback((e: React.MouseEvent) => {
    navigate(`/x2be65a1401b75f2cdd8deaec5a04a976/edit/${window.encodeURI(`${pkArray[0]}`)}`)
    e.preventDefault()
  }, [navigate, pkArray])

  return (
    <FormProvider {...reactHookFormMethods}>
      <form className="page-content-root gap-2">
        <h1 className="flex text-base font-semibold select-none py-1">
          <Link to="/x1ee70bce22334c6e1db2bcea5959f16b">Log</Link>
          &nbsp;&#047;&nbsp;
          <span className="select-all">{instanceName}</span>
          <div className="flex-1"></div>
        </h1>

        <Util.InlineMessageList />

        <LogView />

        <Input.IconButton submit fill className="self-start" icon={PencilIcon} onClick={navigateToEditView}>編集</Input.IconButton>
      </form>
    </FormProvider>
  )
}

const LogView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues } = Util.useFormContextEx<AggregateType.LogDisplayData>()
  const item = getValues()

  return (
    <>
      <VForm.Container leftColumnMinWidth="17.6rem">
        <input type="hidden" {...register(`own_members.ID`)} />
        <VForm.Item label="LogTime">
          <Input.Date {...registerEx(`own_members.LogTime`)} readOnly />
        </VForm.Item>
        <VForm.Item label="UpdatedObject">
          <Input.Word {...registerEx(`own_members.UpdatedObject`)} readOnly />
        </VForm.Item>
        <VForm.Item label="UpdateType">
          <Input.Word {...registerEx(`own_members.UpdateType`)} readOnly />
        </VForm.Item>
        <VForm.Item label="RowIdOrRowTypeId">
          <Input.Word {...registerEx(`own_members.RowIdOrRowTypeId`)} readOnly />
        </VForm.Item>
        <VForm.Item label="Content">
          <Input.Description {...registerEx(`own_members.Content`)} readOnly />
        </VForm.Item>
      </VForm.Container>
    </>
  )
}
