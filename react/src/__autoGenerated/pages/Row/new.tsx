import React, { useState, useEffect, useCallback, useMemo, useReducer, useRef, useId, useContext, createContext } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { SubmitHandler, useForm, FormProvider, useFormContext, useFieldArray } from 'react-hook-form';
import { BookmarkSquareIcon, PencilIcon, XMarkIcon, PlusIcon, ArrowUturnLeftIcon } from '@heroicons/react/24/outline';
import { UUID } from 'uuidjs';
import dayjs from 'dayjs';
import * as Input from '../../input';
import * as Layout from '../../collection';
import * as Util from '../../util';
import * as AggregateType from '../../autogenerated-types'

const VForm = Layout.VerticalForm

export default function () {
  return (
    <Util.MsgContextProvider>
      <Page />
    </Util.MsgContextProvider>
  )
}

const Page = () => {
  const { key0: keyOfNewItem } = useParams()
  const { load, commit } = Util.useRowRepository(keyOfNewItem as Util.ItemKey | undefined)

  const [defaultValues, setDefaultValues] = useState<AggregateType.RowDisplayData | undefined>()
  useEffect(() => {
    load().then(items => {
      setDefaultValues(items?.[0])
    })
  }, [load])

  const handleCommit: ReturnType<typeof Util.useRowRepository>['commit'] = useCallback(async (...items) => {
    await commit(...items)
    const afterCommit = await load()
    setDefaultValues(afterCommit?.[0])
  }, [load, commit])

  return defaultValues ? (
    <AfterLoaded
      defaultValues={defaultValues}
      commit={handleCommit}
    ></AfterLoaded>
  ) : (
    <>
      <Util.InlineMessageList />
    </>
  )
}

const AfterLoaded = ({
  defaultValues,
  commit,
}: {
  defaultValues: AggregateType.RowDisplayData
  commit: ReturnType<typeof Util.useRowRepository>['commit']
}) => {

  const navigate = useNavigate()
  const reactHookFormMethods = useForm({ defaultValues })
  const { handleSubmit } = reactHookFormMethods


  const formRef = useRef<HTMLFormElement>(null)
  const onKeyDown: React.KeyboardEventHandler<HTMLFormElement> = useCallback(e => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      // Ctrl + Enter で送信
      formRef.current?.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))

    } else if (e.key === 'Enter' && !(e.target as HTMLElement).matches('textarea')) {
      // フォーム中でEnterキーが押されたときに誤submitされるのを防ぐ。
      // textareaでpreventDefaultすると改行できなくなるので除外
      e.preventDefault()
    }
  }, [])

  // データの一時保存
  const onSave: SubmitHandler<AggregateType.RowDisplayData> = useCallback(async data => {
    await commit({ ...data, willBeChanged: true })
  }, [commit])

  return (
    <FormProvider {...reactHookFormMethods}>
      <form className="page-content-root gap-2" ref={formRef} onSubmit={handleSubmit(onSave)} onKeyDown={onKeyDown}>
        <h1 className="flex items-center text-base font-semibold select-none py-1">
          <Util.SideMenuCollapseButton />
          <Link to="/xaa6703a7b77c514e0f4f9413ccf059d3">Row</Link>
          &nbsp;&#047;&nbsp;
          新規作成
          <div className="flex-1"></div>

          <Input.IconButton submit fill className="self-start" icon={BookmarkSquareIcon}>一時保存</Input.IconButton>
        </h1>

        <Util.InlineMessageList />

        <div className="flex-1 p-1">
          <RowView />
        </div>
      </form>
    </FormProvider>
  )
}

const RowView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const item = getValues()

  return (
    <>
      <VForm.Container leftColumnMinWidth="12.8rem">
        <input type="hidden" {...register(`own_members.ID`)} />
        <VForm.Item label="Text">
          <Input.Description {...registerEx(`own_members.Text`)} />
        </VForm.Item>
        <VForm.Item label="RowType">
          <Input.ComboBoxRowType {...registerEx(`own_members.RowType`)} className='w-full' />
        </VForm.Item>
        <AttrsView />
        <VForm.Item label="Indent">
          <Input.Num {...registerEx(`own_members.Indent`)} />
        </VForm.Item>
        <VForm.Item label="CreatedOn">
          <Input.Date {...registerEx(`own_members.CreatedOn`)} />
        </VForm.Item>
        <VForm.Item label="CreateUser">
          <Input.Word {...registerEx(`own_members.CreateUser`)} />
        </VForm.Item>
        <VForm.Item label="UpdatedOn">
          <Input.Date {...registerEx(`own_members.UpdatedOn`)} />
        </VForm.Item>
        <VForm.Item label="UpdateUser">
          <Input.Word {...registerEx(`own_members.UpdateUser`)} />
        </VForm.Item>
      </VForm.Container>
      <Row_RowOrderView />
    </>
  )
}
const Row_RowOrderView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const item = watch(`ref_from_Row_RowOrder`)
  const state = item ? Util.getLocalRepositoryState(item) : undefined

  const handleCreate = useCallback(() => {
    setValue(`ref_from_Row_RowOrder`, {
      localRepositoryItemKey: JSON.stringify(UUID.generate()) as Util.ItemKey,
      existsInRemoteRepository: false,
      willBeChanged: true,
      willBeDeleted: false,
      own_members: {
        Row: {
          __instanceKey: getValues()?.localRepositoryItemKey,
        },
      },
    })
  }, [getValues, setValue])
  const handleDelete = useCallback(() => {
    const current = getValues(`ref_from_Row_RowOrder`)
    if (current) setValue(`ref_from_Row_RowOrder`, { ...current, willBeDeleted: true })
  }, [setValue, getValues])
  const handleRedo = useCallback(() => {
    const current = getValues(`ref_from_Row_RowOrder`)
    if (current) setValue(`ref_from_Row_RowOrder`, { ...current, willBeDeleted: false })
  }, [setValue, getValues])

  return (
    <>
      <VForm.Container
        leftColumnMinWidth="10.4rem"
        label="RowOrder"
        labelSide={(state === '' || state === '+' || state === '*') && (
          <Input.Button icon={XMarkIcon} onClick={handleDelete}>削除</Input.Button>
        )}
        className="pt-4"
      >
        {state === undefined && (
          <VForm.Item wide>
            <Input.Button icon={PlusIcon} onClick={handleCreate}>作成</Input.Button>
          </VForm.Item>
        )}
        {state === '-' && (
          <VForm.Item wide>
            <Input.Button icon={ArrowUturnLeftIcon} onClick={handleRedo}>元に戻す</Input.Button>
          </VForm.Item>
        )}
        {(state === '' || state === '+' || state === '*') && (
          <>
            <input type="hidden" {...register(`ref_from_Row_RowOrder.own_members.Row`)} />
            <VForm.Item label="Order">
              <Input.Num {...registerEx(`ref_from_Row_RowOrder.own_members.Order`)} />
            </VForm.Item>
          </>
        )}
      </VForm.Container>
    </>
  )
}
const AttrsView = ({ }: {
}) => {
  const { register, registerEx, watch, control } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const { fields, append, remove } = useFieldArray({
    control,
    name: `child_Attrs`,
  })
  const onCreate = useCallback(() => {
    append({
      localRepositoryItemKey: JSON.stringify(UUID.generate()) as Util.ItemKey,
      existsInRemoteRepository: false,
      willBeChanged: true,
      willBeDeleted: false,
      own_members: {
      },
    })
  }, [append])
  const onRemove = useCallback((index: number) => {
    return (e: React.MouseEvent) => {
      remove(index)
      e.preventDefault()
    }
  }, [remove])

  return (
    <VForm.Container labelSide={(
      <div className="flex gap-2 justify-start">
        <h1 className="text-base font-semibold select-none py-1">
          Attrs
        </h1>
        <Input.Button onClick={onCreate}>追加</Input.Button>
        <div className="flex-1"></div>
      </div>
    )}>
      {fields.map((item, index_0) => (
        <VForm.Container key={index_0} labelSide={(
          <Input.IconButton
            underline
            icon={XMarkIcon}
            onClick={onRemove(index_0)}>
            削除
          </Input.IconButton>
        )}>
          <input type="hidden" {...register(`child_Attrs.${index_0}.own_members.ColType`)} />
          <VForm.Item label="Value">
            <Input.Description {...registerEx(`child_Attrs.${index_0}.own_members.Value`)} />
          </VForm.Item>
          <VForm.Item label="UpdatedOn">
            <Input.Date {...registerEx(`child_Attrs.${index_0}.own_members.UpdatedOn`)} />
          </VForm.Item>
          <RowAttrsRefsView index_0={index_0} />
        </VForm.Container>
      ))}
    </VForm.Container>
  )
}
const RowAttrsRefsView = ({index_0 }: {
  index_0: number
}) => {
  const { get } = Util.useHttpRequest()
  const { register, registerEx, watch, control } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const { fields, append, remove, update } = useFieldArray({
    control,
    name: `child_Attrs.${index_0}.child_RowAttrsRefs`,
  })
  const dtRef = useRef<Layout.DataTableRef<AggregateType.RowAttrsRefsDisplayData>>(null)

  const onAdd = useCallback((e: React.MouseEvent) => {
    append({
      localRepositoryItemKey: JSON.stringify(UUID.generate()) as Util.ItemKey,
      existsInRemoteRepository: false,
      willBeChanged: true,
      willBeDeleted: false,
      own_members: {
      },
    })
    e.preventDefault()
  }, [append])
  const onRemove = useCallback((e: React.MouseEvent) => {
    const selectedRowIndexes = dtRef.current?.getSelectedRows().map(({ rowIndex }) => rowIndex) ?? []
    for (const index of selectedRowIndexes.sort((a, b) => b - a)) remove(index)
    e.preventDefault()
  }, [remove])

  const options = useMemo<Layout.DataTableProps<AggregateType.RowAttrsRefsDisplayData>>(() => ({
    onChangeRow: update,
    columns: [
      {
        id: 'col1',
        header: 'RefToRow',
        cell: cellProps => {
          const value = cellProps.row.original.own_members?.RefToRow
          return (
            <span className="block w-full px-1 overflow-hidden whitespace-nowrap">
              {value}
              &nbsp; {/* <= すべての値が空の行がつぶれるのを防ぐ */}
            </span>
          )
        },
        accessorFn: row => row.own_members?.RefToRow,
        editSetting: {
          type: 'text',
          getTextValue: row => row.own_members?.RefToRow,
          setTextValue: (row, value) => {
            row.own_members.RefToRow = value
          },
        },
      },
    ],
  }), [get, index_0, update])

  return (
    <VForm.Item wide
      label="RowAttrsRefs"
      labelSide={<>
        <Input.Button
          icon={PlusIcon}
          onClick={onAdd}>
          追加
        </Input.Button>
        <Input.Button
          icon={XMarkIcon}
          onClick={onRemove}>
          削除
        </Input.Button>
      </>}
      >
      <Layout.DataTable
        ref={dtRef}
        data={fields}
        {...options}
        className="h-64 w-full border-t border-color-3"
      />
    </VForm.Item>
  )
}
