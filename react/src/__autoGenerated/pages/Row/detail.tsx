import React, { useState, useEffect, useCallback, useMemo, useReducer, useRef, useId, useContext, createContext } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { SubmitHandler, useForm, FormProvider, useFormContext, useFieldArray } from 'react-hook-form';
import { BookmarkSquareIcon, PencilIcon, XMarkIcon, PlusIcon, ArrowUturnLeftIcon } from '@heroicons/react/24/outline';
import { UUID } from 'uuidjs';
import dayjs from 'dayjs';
import * as Input from '../../input';
import * as Layout from '../../collection';
import * as Util from '../../util';
import * as AggregateType from '../../autogenerated-types'

const VForm = Layout.VerticalForm

export default function () {
  return (
    <Util.MsgContextProvider>
      <Page />
    </Util.MsgContextProvider>
  )
}

const Page = () => {
  const { key0 } = useParams()
  const pkArray: [string | undefined] = useMemo(() => {
    const urlKeyID = key0
    return [urlKeyID]
  }, [key0])

  const { load } = Util.useRowRepository(pkArray)

  const [defaultValues, setDefaultValues] = useState<AggregateType.RowDisplayData | undefined>()
  useEffect(() => {
    load().then(items => {
      setDefaultValues(items?.[0])
    })
  }, [load])

  return defaultValues ? (
    <AfterLoaded
      pkArray={pkArray}
      defaultValues={defaultValues}
    ></AfterLoaded>
  ) : (
    <>
      <Util.InlineMessageList />
    </>
  )
}

const AfterLoaded = ({
  pkArray,
  defaultValues,
}: {
  pkArray: [string | undefined]
  defaultValues: AggregateType.RowDisplayData
}) => {

  const navigate = useNavigate()
  const reactHookFormMethods = useForm({ defaultValues })
  const { handleSubmit } = reactHookFormMethods

  const instanceName = useMemo(() => {
    return `${defaultValues.own_members?.Label ?? ''}`
  }, [defaultValues.own_members])

  const formRef = useRef<HTMLFormElement>(null)
  const onKeyDown: React.KeyboardEventHandler<HTMLFormElement> = useCallback(e => {
    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
      // Ctrl + Enter で送信
      formRef.current?.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }))

    } else if (e.key === 'Enter' && !(e.target as HTMLElement).matches('textarea')) {
      // フォーム中でEnterキーが押されたときに誤submitされるのを防ぐ。
      // textareaでpreventDefaultすると改行できなくなるので除外
      e.preventDefault()
    }
  }, [])

  const navigateToEditView = useCallback((e: React.MouseEvent) => {
    navigate(`/xc431ca892f0ec48c9bbc3311bb00c38c/edit/${window.encodeURI(`${pkArray[0]}`)}`)
    e.preventDefault()
  }, [navigate, pkArray])

  return (
    <FormProvider {...reactHookFormMethods}>
      <form className="page-content-root gap-2">
        <h1 className="flex text-base font-semibold select-none py-1">
          <Link to="/xaa6703a7b77c514e0f4f9413ccf059d3">Row</Link>
          &nbsp;&#047;&nbsp;
          <span className="select-all">{instanceName}</span>
          <div className="flex-1"></div>
        </h1>

        <Util.InlineMessageList />

        <RowView />

        <Input.IconButton submit fill className="self-start" icon={PencilIcon} onClick={navigateToEditView}>編集</Input.IconButton>
      </form>
    </FormProvider>
  )
}

const RowView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const item = getValues()

  return (
    <>
      <VForm.Container leftColumnMinWidth="11.6rem">
        <input type="hidden" {...register(`own_members.ID`)} />
        <VForm.Item label="Parent">
          <Input.Word {...registerEx(`own_members.Parent`)} readOnly />
        </VForm.Item>
        <VForm.Item label="Label">
          <Input.Description {...registerEx(`own_members.Label`)} readOnly />
        </VForm.Item>
        <VForm.Item label="RowType">
          <Link className="text-link" to={Util.getRowTypeSingleViewUrl(getValues('own_members.RowType.__instanceKey'), 'view')}>
            {`${item.own_members?.RowType?.ID ?? ''}`}
          </Link>
        </VForm.Item>
        <AttrsView />
      </VForm.Container>
      <Row_RowOrderView />
    </>
  )
}
const Row_RowOrderView = ({ }: {
}) => {
  const { register, registerEx, watch, getValues, setValue } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const item = watch(`ref_from_Row_RowOrder`)
  const state = item ? Util.getLocalRepositoryState(item) : undefined

  const handleCreate = useCallback(() => {
    setValue(`ref_from_Row_RowOrder`, {
      localRepositoryItemKey: JSON.stringify(UUID.generate()) as Util.ItemKey,
      existsInRemoteRepository: false,
      willBeChanged: true,
      willBeDeleted: false,
      own_members: {
        Row: {
          __instanceKey: getValues()?.localRepositoryItemKey,
        },
      },
    })
  }, [getValues, setValue])
  const handleDelete = useCallback(() => {
    const current = getValues(`ref_from_Row_RowOrder`)
    if (current) setValue(`ref_from_Row_RowOrder`, { ...current, willBeDeleted: true })
  }, [setValue, getValues])
  const handleRedo = useCallback(() => {
    const current = getValues(`ref_from_Row_RowOrder`)
    if (current) setValue(`ref_from_Row_RowOrder`, { ...current, willBeDeleted: false })
  }, [setValue, getValues])

  return (
    <>
      <VForm.Container
        leftColumnMinWidth="10.4rem"
        label="RowOrder"
        labelSide={(state === '' || state === '+' || state === '*') && (
          <Input.Button icon={XMarkIcon} onClick={handleDelete}>削除</Input.Button>
        )}
        className="pt-4"
      >
        {state === undefined && (
          <VForm.Item wide>
            <Input.Button icon={PlusIcon} onClick={handleCreate}>作成</Input.Button>
          </VForm.Item>
        )}
        {state === '-' && (
          <VForm.Item wide>
            <Input.Button icon={ArrowUturnLeftIcon} onClick={handleRedo}>元に戻す</Input.Button>
          </VForm.Item>
        )}
        {(state === '' || state === '+' || state === '*') && (
          <>
            <input type="hidden" {...register(`ref_from_Row_RowOrder.own_members.Row`)} />
            <VForm.Item label="Order">
              <Input.Num {...registerEx(`ref_from_Row_RowOrder.own_members.Order`)} readOnly />
            </VForm.Item>
          </>
        )}
      </VForm.Container>
    </>
  )
}
const AttrsView = ({ }: {
}) => {
  const { registerEx, watch, control } = Util.useFormContextEx<AggregateType.RowDisplayData>()
  const { fields, append, remove, update } = useFieldArray({
    control,
    name: `child_Attrs`,
  })
  const dtRef = useRef<Layout.DataTableRef<AggregateType.AttrsDisplayData>>(null)


  const options = useMemo<Layout.DataTableProps<AggregateType.AttrsDisplayData>>(() => ({
    columns: [
      {
        id: 'col1',
        header: 'ColType',
        cell: cellProps => {
          const value = cellProps.row.original.own_members?.ColType
          const formatted = `${value?.Parent?.ID ?? ''}${value?.ColumnId ?? ''}`
          return (
            <span className="block w-full px-1 overflow-hidden whitespace-nowrap">
              {formatted}
              &nbsp; {/* <= すべての値が空の行がつぶれるのを防ぐ */}
            </span>
          )
        },
        accessorFn: data => data.own_members?.ColType,
      },
      {
        id: 'col2',
        header: 'Value',
        cell: cellProps => {
          const value = cellProps.row.original.own_members?.Value
          return (
            <span className="block w-full px-1 overflow-hidden whitespace-nowrap">
              {value}
              &nbsp; {/* <= すべての値が空の行がつぶれるのを防ぐ */}
            </span>
          )
        },
        accessorFn: data => data.own_members?.Value,
      },
    ],
  }), [update])

  return (
    <VForm.Item wide
      label="Attrs"
      >
      <Layout.DataTable
        ref={dtRef}
        data={fields}
        {...options}
        className="h-64 w-full"
      />
    </VForm.Item>
  )
}
