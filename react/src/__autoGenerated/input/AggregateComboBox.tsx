import React, { useState, useMemo, useCallback, useRef, useImperativeHandle } from "react"
import * as Util from "../util"
import { defineCustomComponent, AsyncComboBox, CustomComponentRef } from "../input"
import * as Types from "../autogenerated-types"

export const ComboBoxRow = defineCustomComponent<Types.RowRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-xc431ca892f0ec48c9bbc3311bb00c38c::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.RowRefInfo[]> => {
    setQueryKey(`combo-xc431ca892f0ec48c9bbc3311bb00c38c::${keyword ?? ''}`)
    const response = await get<Types.RowRefInfo []>(`/api/Row/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Text ?? ''}`}
    />
  )
})
export const ComboBoxAttrs = defineCustomComponent<Types.AttrsRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x218859120e2951a46aa6ad9fb9e627cc::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.AttrsRefInfo[]> => {
    setQueryKey(`combo-x218859120e2951a46aa6ad9fb9e627cc::${keyword ?? ''}`)
    const response = await get<Types.AttrsRefInfo []>(`/api/Row/list-by-keyword-x218859120e2951a46aa6ad9fb9e627cc`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Value ?? ''}`}
    />
  )
})
export const ComboBoxRowOrder = defineCustomComponent<Types.RowOrderRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x29a9c912e5efa23f5781a3a7e18e9808::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.RowOrderRefInfo[]> => {
    setQueryKey(`combo-x29a9c912e5efa23f5781a3a7e18e9808::${keyword ?? ''}`)
    const response = await get<Types.RowOrderRefInfo []>(`/api/RowOrder/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Row?.ID ?? ''}`}
    />
  )
})
export const ComboBoxRowType = defineCustomComponent<Types.RowTypeRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x482f568abd9568fda9b360b0bf991835::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.RowTypeRefInfo[]> => {
    setQueryKey(`combo-x482f568abd9568fda9b360b0bf991835::${keyword ?? ''}`)
    const response = await get<Types.RowTypeRefInfo []>(`/api/RowType/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.ID ?? ''}`}
    />
  )
})
export const ComboBoxColumns = defineCustomComponent<Types.ColumnsRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x4411d631bacb9f19ceba5b9461ffdee8::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.ColumnsRefInfo[]> => {
    setQueryKey(`combo-x4411d631bacb9f19ceba5b9461ffdee8::${keyword ?? ''}`)
    const response = await get<Types.ColumnsRefInfo []>(`/api/RowType/list-by-keyword-x4411d631bacb9f19ceba5b9461ffdee8`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}${item.ColumnId ?? ''}`}
    />
  )
})
export const ComboBoxComment = defineCustomComponent<Types.CommentRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-xcc9c15b1503ef15d999d64ce6d5fe189::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.CommentRefInfo[]> => {
    setQueryKey(`combo-xcc9c15b1503ef15d999d64ce6d5fe189::${keyword ?? ''}`)
    const response = await get<Types.CommentRefInfo []>(`/api/Comment/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Text ?? ''}`}
    />
  )
})
export const ComboBoxCommentTargetRow = defineCustomComponent<Types.CommentTargetRowRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x0317596766f8a7909d19342a344697c1::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.CommentTargetRowRefInfo[]> => {
    setQueryKey(`combo-x0317596766f8a7909d19342a344697c1::${keyword ?? ''}`)
    const response = await get<Types.CommentTargetRowRefInfo []>(`/api/Comment/list-by-keyword-x0317596766f8a7909d19342a344697c1`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}`}
    />
  )
})
export const ComboBoxCommentTargetCell = defineCustomComponent<Types.CommentTargetCellRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x79f0174a9ab298d2244bc58cc96d624e::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.CommentTargetCellRefInfo[]> => {
    setQueryKey(`combo-x79f0174a9ab298d2244bc58cc96d624e::${keyword ?? ''}`)
    const response = await get<Types.CommentTargetCellRefInfo []>(`/api/Comment/list-by-keyword-x79f0174a9ab298d2244bc58cc96d624e`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}`}
    />
  )
})
export const ComboBoxCommentTargetRowType = defineCustomComponent<Types.CommentTargetRowTypeRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x150a10f7804962ded6de2c5f43488a3e::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.CommentTargetRowTypeRefInfo[]> => {
    setQueryKey(`combo-x150a10f7804962ded6de2c5f43488a3e::${keyword ?? ''}`)
    const response = await get<Types.CommentTargetRowTypeRefInfo []>(`/api/Comment/list-by-keyword-x150a10f7804962ded6de2c5f43488a3e`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}`}
    />
  )
})
export const ComboBoxCommentTargetColumn = defineCustomComponent<Types.CommentTargetColumnRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-xd90e13e83b393023c5380cbf9deb685f::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.CommentTargetColumnRefInfo[]> => {
    setQueryKey(`combo-xd90e13e83b393023c5380cbf9deb685f::${keyword ?? ''}`)
    const response = await get<Types.CommentTargetColumnRefInfo []>(`/api/Comment/list-by-keyword-xd90e13e83b393023c5380cbf9deb685f`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}`}
    />
  )
})
export const ComboBoxLog = defineCustomComponent<Types.LogRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>(`combo-x2be65a1401b75f2cdd8deaec5a04a976::`)
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.LogRefInfo[]> => {
    setQueryKey(`combo-x2be65a1401b75f2cdd8deaec5a04a976::${keyword ?? ''}`)
    const response = await get<Types.LogRefInfo []>(`/api/Log/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Content ?? ''}`}
    />
  )
})
