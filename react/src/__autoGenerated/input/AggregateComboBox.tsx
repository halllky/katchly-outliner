import React, { useState, useMemo, useCallback, useRef, useImperativeHandle } from "react"
import * as Util from "../util"
import { defineCustomComponent, AsyncComboBox, CustomComponentRef } from "../input"
import * as Types from "../autogenerated-types"

export const ComboBoxRow = defineCustomComponent<Types.RowRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>('combo-xc431ca892f0ec48c9bbc3311bb00c38c::')
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.RowRefInfo[]> => {
    setQueryKey(`combo-xc431ca892f0ec48c9bbc3311bb00c38c::${keyword ?? ''}`)
    const response = await get<Types.RowRefInfo []>(`/api/Row/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Label ?? ''}`}
    />
  )
})
export const ComboBoxAttrs = defineCustomComponent<Types.AttrsRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>('combo-x218859120e2951a46aa6ad9fb9e627cc::')
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.AttrsRefInfo[]> => {
    setQueryKey(`combo-x218859120e2951a46aa6ad9fb9e627cc::${keyword ?? ''}`)
    const response = await get<Types.AttrsRefInfo []>(`/api/Row/list-by-keyword-x218859120e2951a46aa6ad9fb9e627cc`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Value ?? ''}`}
    />
  )
})
export const ComboBoxRowType = defineCustomComponent<Types.RowTypeRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>('combo-x482f568abd9568fda9b360b0bf991835::')
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.RowTypeRefInfo[]> => {
    setQueryKey(`combo-x482f568abd9568fda9b360b0bf991835::${keyword ?? ''}`)
    const response = await get<Types.RowTypeRefInfo []>(`/api/RowType/list-by-keyword`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.ID ?? ''}`}
    />
  )
})
export const ComboBoxColumns = defineCustomComponent<Types.ColumnsRefInfo>((props, ref) => {
  const [queryKey, setQueryKey] = useState<string>('combo-x4411d631bacb9f19ceba5b9461ffdee8::')
  const { get } = Util.useHttpRequest()
  const query = useCallback(async (keyword: string | undefined): Promise<Types.ColumnsRefInfo[]> => {
    setQueryKey(`combo-x4411d631bacb9f19ceba5b9461ffdee8::${keyword ?? ''}`)
    const response = await get<Types.ColumnsRefInfo []>(`/api/RowType/list-by-keyword-x4411d631bacb9f19ceba5b9461ffdee8`, { keyword })
    if (!response.ok) return []
    return response.data
  }, [get])

  return (
    <AsyncComboBox
      {...props}
      ref={ref}
      queryKey={queryKey}
      query={query}
      emitValueSelector={item => item}
      matchingKeySelectorFromEmitValue={item => item.__instanceKey}
      matchingKeySelectorFromOption={item => item.__instanceKey}
      textSelector={item => `${item.Parent?.ID ?? ''}${item.ColumnId ?? ''}`}
    />
  )
})
