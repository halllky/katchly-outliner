import React, { useEffect, useMemo, useReducer, useState } from 'react'
import { useFieldArray } from 'react-hook-form'
import * as Util from './__autoGenerated/util'
import * as Input from './__autoGenerated/input'
import * as Collection from './__autoGenerated/collection'
import createTestData from './MainPageTestData'
import { GridRow, RowObject, RowType, RowTypeId, getAttrCellValue, getLabelCellValue, setAttrCellValue, setLabelCellValue, toGridRows } from './Types'

export default function () {

  const [many, setMany] = useState<boolean | undefined>(true)
  const { rowTypes, rows } = useMemo(() => {
    return createTestData(many ?? false)
  }, [many])
  const debugStyle = useMemo((): React.CSSProperties => ({
    fontFamily: '"BIZ UDGothic"',
  }), [])

  if (!rowTypes || !rows) return (
    <span>読み込み中...</span>
  )

  return (
    <div className="flex flex-col h-full p-1" style={debugStyle}>
      <div className="flex justify-end">
        <label className="flex items-center">
          <Input.CheckBox value={many} onChange={setMany} />
          多数データでデバッグ
        </label>
      </div>
      <AfterLoaded
        className="flex-1 overflow-x-hidden"
        rowTypeData={rowTypes}
        rowData={rows}
      />
    </div>
  )
}

const AfterLoaded = ({ rowData, rowTypeData, ...rest }: {
  rowData: RowObject[]
  rowTypeData: RowType[]
  className?: string
  style?: React.CSSProperties
}) => {

  // RowType
  const [{ rowTypeMap }, dispatchRowType] = useReducer(rowTypeMapReducer, undefined, () => ({ rowTypeMap: new Map() }))
  useEffect(() => {
    dispatchRowType(state => state.init(rowTypeData))
  }, [rowTypeData])

  // 行
  const { control, reset } = Util.useFormEx<PageFormState>({})
  const { fields, update } = useFieldArray({ control, name: 'gridRows' })
  useEffect(() => {
    reset({ gridRows: toGridRows(rowData) })
  }, [rowData])

  // 列
  const [columnCount, setColumnCount] = useState(4)
  const [indentSize, setIndentSize] = useState(24)
  const columnDefs = useMemo((): Collection.ColumnDefEx<Util.TreeNode<GridRow>>[] => [
    // ラベルの列
    {
      id: 'col0',
      header: '　',
      size: 640,
      cell: cellProps => {
        const bgColor = cellProps.row.original.item.type === 'rowType' ? ROWTYPE_STYLE : ''
        const style: React.CSSProperties = { marginLeft: cellProps.row.original.item.indent * indentSize }
        return (
          <span className={`block w-full px-1 overflow-hidden whitespace-nowrap ${bgColor}`} style={style}>
            {getLabelCellValue(cellProps.row.original.item, rowTypeMap)}&nbsp;
          </span>
        )
      },
      accessorFn: data => getLabelCellValue(data.item, rowTypeMap),
      setValue: (row, value) => {
        const { updatedRowType } = setLabelCellValue(row.item, rowTypeMap, value)
        if (updatedRowType) dispatchRowType(state => state.set({ ...updatedRowType }))
      },
      cellEditor: (props, ref) => <Input.Word ref={ref} {...props} />,

    },

    // 属性の列
    ...Array.from({ length: columnCount }, (_, i) => i).map<Collection.ColumnDefEx<Util.TreeNode<GridRow>>>(i => ({
      id: `col${i + 1}`,
      header: '　',
      cell: cellProps => {
        const bgColor = cellProps.row.original.item.type === 'rowType' ? ROWTYPE_STYLE : ''
        return (
          <span className={`block w-full px-1 overflow-hidden whitespace-nowrap ${bgColor}`}>
            {getAttrCellValue(cellProps.row.original.item, rowTypeMap, i)}&nbsp;
          </span>
        )
      },
      accessorFn: data => getAttrCellValue(data.item, rowTypeMap, i),
      setValue: (row, value) => {
        const { updatedRowType } = setAttrCellValue(row.item, rowTypeMap, i, value)
        if (updatedRowType) dispatchRowType(state => state.set({ ...updatedRowType }))
      },
      cellEditor: (props, ref) => <Input.Word ref={ref} {...props} />,
    }))
  ], [columnCount, indentSize, rowTypeMap, update, dispatchRowType])

  return (
    <div {...rest}>
      <Collection.DataTable
        data={fields}
        columns={columnDefs}
        onChangeRow={update}
        className="h-full"
      />
    </div>
  )
}

const ROWTYPE_STYLE = 'text-neutral-500 bg-neutral-500/10'

type PageFormState = {
  gridRows: GridRow[]
}

const rowTypeMapReducer = Util.defineReducer((state: {
  rowTypeMap: Map<RowTypeId, RowType>
}) => ({
  init: (rowTypes: RowType[]) => ({
    rowTypeMap: new Map(rowTypes.map(t => [t.id, t])),
  }),
  set: (rowType: RowType) => {
    const rowTypeMap = new Map(state.rowTypeMap)
    rowTypeMap.set(rowType.id, rowType)
    return { rowTypeMap }
  },
}))
