import { useCallback, useEffect, useRef } from 'react'
import * as Util from './__autoGenerated/util'
import * as Input from './__autoGenerated/input'
import { VerticalForm } from './__autoGenerated/collection'
import { ModalDialog } from './__autoGenerated/collection/ModalDialog'
import { RadioGroupBase } from './__autoGenerated/input/ToggleBase'

export type AppSetting = {
  userName?: string
  detailViewPosition?: 'right' | 'bottom' | ''
}

export const [AppSettingContext, useAppSettings] = Util.defineStorageContext({
  storageKey: 'OUTLINER::APPSETTINGS',
  defaultValue: (): AppSetting => ({
    userName: '',
    detailViewPosition: 'right',
  }),
  deserialize: str => ({ ok: true, obj: JSON.parse(str) as AppSetting }),
  serialize: obj => JSON.stringify(obj),
})

/** 設定画面 */
export const AppSttingsDialog = ({ open, onClose }: {
  open: boolean
  onClose: () => void
}) => {
  const [, dispatchToast] = Util.useToastContext()
  const { post } = Util.useHttpRequest()

  // アプリ設定
  const { data, save } = useAppSettings()
  const { reset, registerEx, handleSubmit } = Util.useFormEx<typeof data>({})
  useEffect(() => {
    reset(data)
  }, [data])
  const onSave = useCallback((newData: AppSetting) => {
    save(newData)
    dispatchToast(msg => msg.info('保存しました。'))
  }, [save, dispatchToast])

  // データ操作
  const recreateDatabase = useCallback(async () => {
    if (window.confirm('DBを再作成します。データは全て削除されます。よろしいですか？')
      && window.confirm('後悔しませんね？')) {
      const response = await post('/WebDebugger/recreate-database')
      if (response.ok) {
        dispatchToast(msg => msg.info('DBを再作成しました。'))
      } else {
        dispatchToast(msg => msg.error('DBの再作成に失敗しました。'))
      }
    }
  }, [post, dispatchToast])

  return (
    <ModalDialog title="設定" open={open} onClose={onClose}>
      <form onSubmit={handleSubmit(onSave)} className="flex flex-col gap-4">
        <VerticalForm.Container label="アプリ設定">
          <VerticalForm.Item label="ユーザー名">
            <Input.Word {...registerEx(`userName`)} />
          </VerticalForm.Item>
          <VerticalForm.Item label="詳細表示パネルの位置(Ctrl + B でも変更可能)">
            <RadioGroupBase
              {...registerEx(`detailViewPosition`)}
              options={DETAIL_VIEW_POSITION}
              keySelector={KEY_SELECTOR}
              textSelector={TEXT_SELECTOR}
            />
          </VerticalForm.Item>
          <VerticalForm.Item wide>
            <Input.IconButton fill submit>保存</Input.IconButton>
          </VerticalForm.Item>
        </VerticalForm.Container>

        <VerticalForm.Container label="データ操作">
          <VerticalForm.Item wide>
            <Input.IconButton outline onClick={recreateDatabase}>DB再作成</Input.IconButton>
          </VerticalForm.Item>
        </VerticalForm.Container>
      </form>
    </ModalDialog>
  )
}

// 詳細表示パネルの位置
type DetailViewOption = { key: 'right' | 'bottom' | '', text: string }
const DETAIL_VIEW_POSITION: DetailViewOption[] = [
  { key: 'right' as const, text: '右' },
  { key: 'bottom' as const, text: '下' },
]
const KEY_SELECTOR = (x: DetailViewOption) => x.key
const TEXT_SELECTOR = (x: DetailViewOption) => x.text
